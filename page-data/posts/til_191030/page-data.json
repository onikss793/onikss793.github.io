{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191030/","webpackCompilationHash":"3da5ccc098066b813da2","result":{"data":{"markdownRemark":{"id":"76b817cf-7bb9-5cff-95bd-bb84a783ccf7","html":"<h2 id=\"database\"><a href=\"#database\" aria-label=\"database permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Database</strong></h2>\n<p>Database는 데이터를 저장 및 보존하는 시스템이다.</p>\n<p>Database를 사용하지 않으면</p>\n<ul>\n<li>첫째로 메모리에 저장할 수가 있다. 하지만 그렇게 할 경우, 속도는 빠르지만 영구 보존이 안 된다.</li>\n<li>둘째로 파일에 저장할 수 있다. 그렇게 하면, 효과적인 데이터 저장이 힘들어진다. (ex: 어제 작업한 것 중, 어떤 특정 단어만 업데이트할 경우 매우 힘들어진다) 그리고 파일의 용량이 커질 경우 속도가 매우 느려질 수 있다.</li>\n<li>결과적으로 영구 보존을 하면서 효과적인 데이터 저장을 위해 데이터 베이스를 사용한다.</li>\n</ul>\n<h3 id=\"관계형-데이터베이스rdbms-relational-database-management-system\"><a href=\"#%EA%B4%80%EA%B3%84%ED%98%95-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4rdbms-relational-database-management-system\" aria-label=\"관계형 데이터베이스rdbms relational database management system permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>관계형 데이터베이스(RDBMS, Relational DataBase Management System)</strong></h3>\n<ul>\n<li>데이터 테이블을 나누는 기준을 설정하는 것이 백앤드 개발자의 역할이다.</li>\n<li>데이터를 테이블을 기준으로 나누는데 행과 열로 나눌 수 있다.</li>\n<li>\n<p>각각의 테이블은 컬럼(column)과 row(로우)로 구성된다.</p>\n<ul>\n<li>서로 연결되어 있는 key를 foreign key라고 한다. 이 foreign key는 실제 존재하는 값이여야만 한다. 존재 하지 않는 데이터는 참조할 수가 없다.</li>\n<li>컬럼은 테이블의 각 항목을 말한다. 행으로 생각하면 된다.</li>\n<li>로우는 각 항목들의 실제 값들을 이야기 한다. 열로 생각하면 된다.</li>\n<li>각 로우는 저만의 고유 키(Primary Key)가 있다. 주로 이 primary key를 통해서 해당 로우를 찾거나 인용(reference)하게 된다.</li>\n<li>PM key를 쓰는 이유는, 컨텍스트가 있는 값들은 변할 가능성이 있기 때문에 변하지 않는 고유한 값을 주는 것이다.(surrogate, natural gate)</li>\n</ul>\n</li>\n<li>\n<p>데이터를 왜 관계형으로 연결하는가?</p>\n<ul>\n<li>데이터 완전성 때문이다.</li>\n<li>데이터가 틀릴 가능성을 아주 줄여준다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"트랜잭션transaction\"><a href=\"#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98transaction\" aria-label=\"트랜잭션transaction permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>트랜잭션(Transaction)</strong></h3>\n<ul>\n<li>ACID를 제공함으로 따라서 트랜잭션(일련의 작업들을 한번에 하나의 unit으로 실행하는것) 기능을 제공하다.</li>\n<li>트랜잭션은 일련의 작업들이 마치 하나의 작업처럼 취급되어서 모두 다 성공하거나 아니면 모두 다 실패하는걸 이야기 한다.</li>\n<li>\n<p>Commit &#x26; rollback</p>\n<ul>\n<li>마치 은행에서 이체를 하는 과정과 같다. 이체에 필요한 모든 과정을 다 하나의 과정으로 묶고 그 과정 중, 하나만 실패하면 처음 과정이 실행하기 전으로 돌아가는 것을 말한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"sql\"><a href=\"#sql\" aria-label=\"sql permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>SQL</strong></h3>\n<p><strong>SELECT</strong><br>\n데이터를 읽어 들일때 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT\n    id,\n    name,\n    age,\n    gender\nFROM users</code></pre></div>\n<p><strong>WHERE</strong> 구문을 사용해 검색도 가능</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT\n    id,\n    name,\n    age,\n    gender\nFROM users\nWHERE name = &quot;아이유&quot;</code></pre></div>\n<p><strong>INSERT</strong><br>\n데이터를 생성할때 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">INSERT INTO users (\n    id,\n    name,\n    age,\n    gender\n) VALUES (\n    1,\n    &quot;아이유&quot;,\n    27,\n    &quot;여자&quot;\n), (\n    2,\n    &quot;제인&quot;,\n    19,\n    &quot;여자&quot;\n)</code></pre></div>\n<p><strong>UPDATE</strong><br>\n데이터를 수정할때 사용\n<code class=\"language-text\">UPDATE users SET age = 25 WHERE name = &quot;아이유&quot;</code></p>\n<p><strong>DELETE</strong><br>\n데이터를 삭제할때 사용<br>\n<code class=\"language-text\">DELETE FROM users WHERE gender = &quot;남자&quot;</code>\n<strong>Exist</strong><br>\n어떠한 조건이 존재 하는지 하지 않는지 확인 할때 사용하는 SQL 문.<br>\n예를 들어, 특정 user_name이 이미 존재하는지 확인 하고 싶을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT 1\nFROM users\nWHERE EXISTS (SELECT *\n              FROM users\n              WHERE user_name = &#39;아이유&#39;);\nNOT EXIST 를 사용하여 반대의 경우도 체크 할 수 있다.\nSELECT lname, fname\nFROM customer\nWHERE NOT EXISTS (SELECT *\n                  FROM orders\n                  WHERE customers.customer_id = orders.c_id);</code></pre></div>\n<p><strong>Join</strong><br>\nForeign key(외부키)로 걸려있는 2개의 table들을 join(연결)해서 양쪽 table에서 모두 row를 읽어 들이고 싶을 때는 join 문을 사용해야 함.<br>\n즉, join은 교집합 이라고 생각하면 된다.<br>\nJoin 기본 문법</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT\n테이블별칭.조회할칼럼,\n테이블별칭.조회할칼럼\nFROM 기준테이블 별칭\nINNER JOIN 조인테이블 별칭 ON 기준테이블별칭.기준키 = 조인테이블별칭.기준키</code></pre></div>\n<p>Join 실제 예</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SELECT\n  users.id,\n  users.name,\n  users.age,\n  users.gender,\n  accounts.account_type\nFROM users\nJOIN accounts ON accounts.id = users.account_id</code></pre></div>\n<p>join 여러 유형들</p>\n<ul>\n<li>(INNER) JOIN: 일반적인 join문. 기준이 되는 테이블 (left table)과 join이 걸리는 테이블(right table) 양쪽 모두에 matching되는 row만 select가 됨.</li>\n<li>LEFT (OUTER) JOIN: 기준이 되는 테이블 (left table)의 모든 row와 join이 걸리는 테이블(right table)중 left table과 matching되는 row만 select가 됨.</li>\n<li>RIGHT (OUTER) JOIN: join이 걸리는 테이블(right table)의 모든 row와 기준이 되는 테이블 (left table)에서 right table과 matching되는 row만 select가 됨.</li>\n<li>FULL (OUTER) JOIN: 기준이 되는 테이블 (left table)과 join이 걸리는 테이블(right table) 양쪽 모두의 모든 row를 select 한다.</li>\n</ul>\n<p><strong>CREATE TABLE</strong><br>\n테이블을 생성할때 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CREATE TABLE accounts(\nid INT NOT NULL AUTO_INCREMENT,\naccount_type VARCHAR(100) NOT NULL,\nPRIMARY KEY (id)\n);\n\nCREATE TABLE users(\nid INT NOT NULL AUTO_INCREMENT,\nname VARCHAR(255) NOT NULL,\nemail VARCHAR(255) NOT NULL,\nhashed_password VARCHAR(255) NOT NULL,\naccount_id INT NOT NULL,\nPRIMARY KEY (id),\nUNIQUE KEY email (email),\nCONSTRAINT `users_account_fkey` FOREIGN KEY (`account_id`) REFERENCES `accounts` (`id`)\n);</code></pre></div>","fields":{"slug":"/posts/til_191030/","tagSlugs":["/tag/til/","/tag/database/"]},"frontmatter":{"date":"2019.10.30","description":"What I learned today","tags":["TIL","Database"],"title":"TIL 191030","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191030/"}}}