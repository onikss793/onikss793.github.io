{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python/","webpackCompilationHash":"4c88981f7706072c8878","result":{"data":{"markdownRemark":{"id":"d539def5-e1b3-58a4-88dd-0a7d1adc03f2","html":"<h4 id=\"hello-world\"><a href=\"#hello-world\" aria-label=\"hello world permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Hello World</strong></h4>\n<p>파이썬에서 화면에 출력을 하고 싶을 때는 <code class=\"language-text\">print()</code>명령어를 사용하면 된다.<br>\npython은 indentation이 매우 중요하다. 그것을 통해 종속 관계를 설정하기 때문이다.<br>\n주로 <code class=\"language-text\">[space bar] X 4</code>를 사용한다.</p>\n<h2 id=\"data-types\"><a href=\"#data-types\" aria-label=\"data types permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Data Types</strong></h2>\n<p>파이썬에는 5개의 data types가 있다.</p>\n<ol>\n<li>Integer 정수</li>\n<li>Float 소수</li>\n<li>Complex Numbers 실수와 허수를 포함하는 복소수</li>\n<li>String 문자열</li>\n<li>Boolean True / False</li>\n</ol>\n<h2 id=\"math-expressions\"><a href=\"#math-expressions\" aria-label=\"math expressions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Math Expressions</strong></h2>\n<p>Javascript와 유사하지만 다른 점이 있다면, 몫을 구하는 <code class=\"language-text\">//</code>가 있다는 것이다. 예를 들어,</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">num1 <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\nnum2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nnum3 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">//</span> num2\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span>\n<span class=\"token number\">3</span></code></pre></div>\n<p>더불어 Integer끼리의 나눗셈의 결과값이 항상 Float의 형태가 된다. 예를 들어,</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">num1 <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\nnum2 <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nnum3 <span class=\"token operator\">=</span> num1 <span class=\"token operator\">/</span> num2\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2.0</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>num3<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span>\n<span class=\"token boolean\">True</span></code></pre></div>\n<h2 id=\"literal-string-interpolation\"><a href=\"#literal-string-interpolation\" aria-label=\"literal string interpolation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>literal string interpolation</strong></h2>\n<p>매우 python다운? String Concatenation 방법이 있다. 대략 3가지 정도가 있는데, 가장 편리한 방법 중 하나는 아래의 예시와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">name <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span>\npring<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\"Hello<span class=\"token punctuation\">,</span> python</code></pre></div>\n<h2 id=\"if-statement\"><a href=\"#if-statement\" aria-label=\"if statement permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>If Statement</strong></h2>\n<p>if는 javascript와 매우 유사한 방식으로 작동하는데, 몇 가지 문법이 조금 다르다. 그 차이는 직관적으로 python이 조금 더 쉽고, 편리한 방법을 지향한다는 점에 기인하는 듯 하다.</p>\n<p>기본적인 문법은 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">name <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span>\n<span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">\"Hello, python\"</span></code></pre></div>\n<p>또한, python은 else if와 else의 기능도 지원한다.(else if 는 elif로 줄여 사용한다)</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">name <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span>\n<span class=\"token keyword\">if</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"javascript\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, Javascript\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">elif</span> name <span class=\"token operator\">==</span> <span class=\"token string\">\"java\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, Java\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"Hello, python\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"logical-operators\"><a href=\"#logical-operators\" aria-label=\"logical operators permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Logical Operators</strong></h2>\n<p>python은 javascript보다 직관적인 논리 연산자를 제공하는 듯 하다. 말 그대로 <code class=\"language-text\">and</code>는 <code class=\"language-text\">그리고</code>의 의미를, <code class=\"language-text\">or</code>은 <code class=\"language-text\">또는</code>의 의미를 가지고 있다. 아울러 <code class=\"language-text\">&gt;, &lt;, =&gt;, =&lt;, ==, !=</code>를 통한 비교 연산도 가능하다.</p>\n<h2 id=\"data-structure\"><a href=\"#data-structure\" aria-label=\"data structure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Data Structure</strong></h2>\n<ul>\n<li>\n<p>list: 서로 다른 type의 값들을 <code class=\"language-text\">[]</code>안에 저장할 수 있으며, 순서가 존재한다. 그렇기에 index를 통해 list의 요소들을 조회할 수 있다.</p>\n<ul>\n<li>기본적인 추가, 제거는 <code class=\"language-text\">append() / del / remove()</code>로 구현할 수 있다.</li>\n<li>slicing은 <code class=\"language-text\">list[start:end]</code>로 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>tuple: tuple은 list와 유사하게 요소들을 한데 모아 저장할 때 쓰이지만, 약간의 차이를 가지고 있다. tuple은 한번 선언하게된 이후에는 수정이 불가능하다. 그럼에도 tuple을 쓰는 이유는 list보다 차지하는 메모리 용량이 적기 때문에, 수정이 필요없고 간단한 형태의 데이터는 tuple로 사용하는 것이 효과적이다.<br>\ntuple은 list와 같이 쓰이는 경우가 많다. 예를 들어,</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></code></pre></div>\n</li>\n<li>\n<p>set: List는 순차적으로 여러가지 요소들이 들어갈 수 있다. 하지만 set은 순차적으로 저장되지 않으며 중복되는 요소들이 없다. 예를 들어,</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">my_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>my_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>기본적인 추가, 제거는 add()와 remove()로 구현할 수 있다.</li>\n<li>\n<p>set은 어떠한 요소가 있는지 찾거나 조회하는데 유용하다.\nin 키워드를 사용해 포함 여부를 확인할 수 있다.<br>\n<code class=\"language-text\">&amp;</code> 와 <code class=\"language-text\">|</code> 를 이용해 교집합과 합집합을 구할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">set1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\nset2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1 <span class=\"token operator\">&amp;</span> set2<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span>intersection<span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Dictionary: key와 value의 값으로 이루어져 있다. Javascript의 객체와 매우 유사하다. 하지만 dot notation으로는 접근할 수 없고, 오직 [key]를 이용해 접근할 수 있다.</li>\n</ul>\n<h2 id=\"loops\"><a href=\"#loops\" aria-label=\"loops permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Loops</strong></h2>\n<ul>\n<li>\n<p>for</p>\n<ul>\n<li>Javascript와 대부분 유사한 방식으로 작동한다. 그러나 변수를 통한 접근이 아닌\n<code class=\"language-text\">py for element in list: do_something_with_element</code>\nelement에 직접적인 접근이 가능하다.\nlist, tuple, set 등 다른 data structure에도 사용이 가능하다.</li>\n<li>break: 반복문이 도중에 break를 만나게 되면, 반복문을 종료하고 빠져나온다.</li>\n<li>continue: 반복문이 도중에 continue를 만나게 되면, 다음 반복으로 넘어가게 된다.</li>\n</ul>\n</li>\n<li>\n<p>while</p>\n<ul>\n<li>else: Javascript의 while과 거의 유사하다. 그러나 Python의 while문은 else문을 추가할 수 있다. while의 조건이 성립되지 않을 때 실행된다는 것인데, 쉽게 말하면 while이 종료될 때 실행된다는 것이다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"keyorded-variable-length-of-arguments\"><a href=\"#keyorded-variable-length-of-arguments\" aria-label=\"keyorded variable length of arguments permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Keyorded variable length of arguments</strong></h2>\n<ul>\n<li>그 수가 정해지지 않고, 유동적으로 변화할 수 있는 arguments를 받기 위해 “kwargs”라는 기능이 있다. 대부분 ”**kwargs”라고 parameter 이름을 정한다.</li>\n<li>이와 비슷하지만, keyword를 사용하지 않고, 순서대로 값을 전달하며, 그저 다양한 수의 arguments를 받기 위한 “args”라는 기능이 있다. 주로 ”*args”라고 parameter 이름을 정한다. 이 arguments는 tuple로 변환되어 함수로 전달된다.</li>\n</ul>\n<h2 id=\"nested-functiondecorator\"><a href=\"#nested-functiondecorator\" aria-label=\"nested functiondecorator permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Nested Function(Decorator)</strong></h2>\n<ul>\n<li>closure를 이용해 부모 함수에서 선언된 변수나 정보를 외부로부터 격리한 채, 중첩 함수에서 그 값을 참조해 사용하기 위해 Nested Function을 사용한다.</li>\n<li>\n<p>중첩 함수의 유지, 보수, 재사용의 효율을 최대화하기 위해 Decorator를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token decorator annotation punctuation\">@decorator</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello'</span>\nfunction<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 function을 실행했을 때, “@decorator”를 자동을 먼저 실행하게 되고,\n“function”이라는 함수를 인자로 받아 사용할 수 있다.\n가장 쉽게 이해할 수 있는 방법은 실행 순서를 생각하며 코드를 짜는 것 같다. 인자에 집중하게 되는 순간 헷갈릴 여지가 생긴다.</p>\n</li>\n</ul>\n<h2 id=\"class\"><a href=\"#class\" aria-label=\"class permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Class</strong></h2>\n<ul>\n<li>Python의 클래스는 Javascript와 다르게 this대신 self라는 키워드를 사용한다.\n또한 클래스 안에서 정의할 수 있는 special method가 있다. 앞, 뒤에 더블 언더스코어(**)를 붙여 사용하는데, 대표적으로 **init__이라는 magic method가 있다. 인스턴스가 선언됨과 동시에 호출된다.</li>\n</ul>\n<h2 id=\"module--packages\"><a href=\"#module--packages\" aria-label=\"module  packages permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Module &#x26; Packages</strong></h2>\n<ul>\n<li>다른 파일에서 재사용이 가능하고, 여러 파일로 나누어 정리하고 관리할 때 사용하는 것이 module이다. import, import as로 모듈을 호출할 수 있다. 특정 함수나 변수를 호출하기 위해서는 from import 키워드를 사용하면 된다. Package는 Module의 모음이라고 생각하면 되며, dot notation과 위의 import와 같은 키워드로 활용하면 된다. Package 안에 <strong>init</strong>.py이라는 라는 파일이 있으면 해당 Package가 import될 때 자동으로 해당 파일의 코드들이 실행되기 때문에 package의 초기 설정이 가능하다.</li>\n<li>\n<p>Sys Module\nSys 모듈은 파이썬 런타임 환경의 다양한 부분을 조작하기 위해 사용되는 함수와 변수를 제공한다.<br>\n먼저 런타임 환경이란 무엇일까. 런타임 환경을 알기 위해서는 런타임을 알아야 할 것 같다. 런타임은 프로그램이 실행되고 있는 그 순간을 말한다. 예를 들어, 컴퓨터에서 어떤 프로그램이 가동되면 그 순간이 그 프로그램의 런타임이다. 말그대로, “runtime 작동하는 순간”을 말한다. 여기서의 순간은 단순 시간적인 것만 이야기하는 것이 아닌, 환경 전체를 의미한다고 보는 것이 명확하다. Javascript => Browser, Node.js 그렇기에 런타임 환경이라는 말을 쓴다고 생각한다.</p>\n<p>이 시점에서 맨 첫 문장을 다시보자.\nSys 모듈은 “파이썬을 구동하는 동안 특정 부분을 조작하기 위해 다양한 함수와 변수를\n제공한다는 의미”이다.\n그렇다면 파이썬은 Sys 모듈을 어떻게 찾아서 import하는 것일까.</p>\n<ul>\n<li>Sys 모듈 빌트인 모듈이다. 그러므로 파이썬을 설치할 때 이미 포함되어 있어 쉽게 찾을 수 있다.<br>\nimport Sys를 하면 우선 현재 작업 디렉토리, 그러니까 프로그램이 실행된 곳의 디렉토리 안을 맨 처음 검색한다.<br>\n두번째로 pythonpath 환경 변수에 등록된 위치를 검색한다. 사용자가 만든 디렉토리를 모듈 검색 경로에 등록하려면 pythonpath 환경변수에 등록하면 된다.<br>\n세번째로 표준라이브러리 디렉토리를 검색한다. 파이썬의 모듈검색경로목록은 sys.path에 리스트 형식으로 관리되고 있다. Sys는 표준라이브러리 디렉토리에 있다.</li>\n<li>sys.modules는 현재 로딩되어 있는 모듈들을 dictionary 형태로 나타낸다.\n수정, 삭제와 같은 조작이 가능하다.\nsys.path는 파이썬이 모듈을 찾을 때 참조하는 경로를 나타낸다.\n여기에 없다면 파이썬이 찾을 수 없을 것이다.\n경로를 추가하는 작업도 가능하다.</li>\n<li>Absolute path는 특정한 파일, 폴더로 가는 절대적인 경로를 말한다.\n그렇기 때문에, 현재 속해 있는 위치가 어디든 상관없이 똑같은 명령어로 경로에 접근할 수 있다는 장점이 있다.\n반면, 경로가 복잡해질 경우에 경로가 매우 길어질 수 있어 가독성이 떨어질 수 있다는 단점이 있다.\nRelative path는 툭정한 파일, 폴더로 가는 상대적인 위치를 말한다.\n경로의 기준이 현재 속해 있는 위치가 되기 때문에, 코드의 길이가 길어질 경우가 상대적으로 적다.\n그러나 위치에 변동이 생길 때마다 코드를 수정해야한다는 단점이 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"exception\"><a href=\"#exception\" aria-label=\"exception permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Exception</strong></h2>\n<p>일반적으로 파이썬에서 exception이 발생하면 다음 코드들이 실행되지 않고 프로그램이 종료된다. 하지만 exception을 지정해준다면 해당 프로세스가 종료되지 않고, 지정해준 로직을 실행하도록 할 수 있다.<br>\n(finally는 exception의 발생 여부와 상관없이 무조건 실행된다.)</p>\n<p>에러는 SyntaxError, ZeroDivisionError, NameError, TypeError 등이 있다. 이런 특정 에러를 catch해서 사용할 수 있고, as 키워드를 사용해서 exception의 객체를 받아서 정보를 더 얻을 수 있다.</p>\n<p>try 문에도 else가 있는데, else는 exception이 발생하지 않았을 때 실행된다.</p>","fields":{"slug":"/posts/python/","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2019.10.07","description":"Basics of Python","tags":["python"],"title":"Python","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python/"}}}