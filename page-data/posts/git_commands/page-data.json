{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/git_commands/","webpackCompilationHash":"c61f5f8762223cd0f0a6","result":{"data":{"markdownRemark":{"id":"63ad7535-9666-5c97-baee-205b1004bc1c","html":"<h4 id=\"--githubio-블로그-만들며서-썻던-git-commands-정리--\"><a href=\"#--githubio-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EB%A9%B0%EC%84%9C-%EC%8D%BB%EB%8D%98-git-commands-%EC%A0%95%EB%A6%AC--\" aria-label=\"  githubio 블로그 만들며서 썻던 git commands 정리   permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>- github.io 블로그 만들며서 썻던 git commands 정리 -</strong></h4>\n<ul>\n<li><strong>기본적인 터미널 단축키</strong><br>\ncd: change directory 디렉토리로 이동할 수 있다.<br>\nls: listing directory 디렉토리에 있는 콘텐츠를 확인할 수 있다.<br>\nopen: file을 열 수 있다.<br>\nmv: move file을 이동시킬 수 있다<br>\nmkdir: make directory 새로운 디렉토리를 만들 수 있다.<br>\nrmdir: 디렉토리를 제거할 수 있다 .<br>\nrm -R: 현재 경로 안에 있는 디렉토리를 제거한다.<br>\nsudo: 관리자로서 접근하여 명령할 수 있다. 매우 신중히 사용할 것.</li>\n<li><strong>우선 Gatsby를 사용할 수 있도록 전역에 설치</strong><br>\n<code class=\"language-text\">npm install -g gatsby-cli</code><br>\nnpm은 node.js package manager의 약자로 자바스크립트 언어를 위한 패키지 관리자이다. node를 다운받으면 같이 받을 수 있다.</li>\n<li><strong>Gatsby의 theme 중 원하는 것의 source code를 가져온다.</strong>\n<code class=\"language-text\">gatsby new blog https://github.com/alxshelepenok/gatsby-starter-lumen</code><br>\n추가적으로 facebook이 만든 yarn을 설치했다.<br>\nyarn은 npm과 같은 자바스크립트 언어를 위한 패키지 관리자이다. npm의 취약한 저장소, 보안의 대안으로 나타났으며 npm보다 속도가 빠르다고 한다.</li>\n<li><strong>블로그 설치 완료 후 localhost에서 확인</strong><br>\nyarn develop 혹은 npm run develop으로 localhost:8000에서 확인 가능하다.<br>\n추가적으로 서버를 멈추고 싶다면 terminal 창을 끄거나 ctrl-c를 누르면 서버가 닫힌다.</li>\n<li><strong>github에 repository를 만든다.</strong><br>\ngithub에서 repository를 만든다. 여기서 주의할 점은 github 사용자 아이디와 같은 이름으로 naming해야 한다는 것이다. 그리고 사용자 이름 뒤에 github.io를 붙인다.<br>\n<code class=\"language-text\">username.github.io</code></li>\n<li><strong>Source Code와 Repository를 연결한다. 설치한 blog파일에서 git을 시작한다.</strong><br>\n<code class=\"language-text\">git init</code> Repository의 주소와 연결한다.<br>\n<code class=\"language-text\">git remote add origin repository-url</code><br>\ngit add와 git commit을 통해 내용을 추가, 수정한 뒤 repository에 저장 가능하다.<br>\ngit add는 commit하기 전 추가할 사항들을 정하는 명령어로 add -p로 세부적인 사항을 하나하나 검토할 수도 있고, add . 으로 일괄적으로 추가할 수도 있다.<br>\ngit commit은 현재 branch로 push하기 전, 그러니까 저장소로 업로드하기 전에 메시지와 함께 작업 내역을 마지막으로 정리할 수 있는 명령어이다. commit -m으로 메시지를 남길 수 있고, commit -v를 이용하면 세부적인 변경사항을 확인할 수 있다.</li>\n<li><strong>push와 deploy</strong><br>\nbranch는 보통 배포용인 master 외에 추가적으로 만들어 관리한다. 블로그이기 때문에 추가적인 branch 한 개를 더 만들어 내용을 업로드한다. 그러나 그 상태로는 아무리 push를 해도 배포에는 반영이 되지 않기 때문에, 자동으로 수행할 수 있는 <code class=\"language-text\">&quot;deploy&quot;: &quot;yarn run clean &amp;&amp; gatsby build &amp;&amp; gh-pages -d public -b master</code> 명령어를 실행한다.<br>\n이후 배포할 때는 <code class=\"language-text\">yarn deploy</code>를 명령어를 사용하면, 알아서 build, master에 push 그리고 deploy도 실행된다.</li>\n</ul>\n<p>​</p>\n<h5 id=\"git-commands\"><a href=\"#git-commands\" aria-label=\"git commands permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Git Commands</strong></h5>\n<ul>\n<li>git init: local에 새로운 repository를 만든다.</li>\n<li>git clone: local에 repository를 복사한다.</li>\n<li>git add: 상태에 1개 혹은 그 이상의 파일을 추가한다.</li>\n<li>git commit: 상태를 commit한다. repository에 접근하기 바로 전 단계</li>\n<li>git push { branch }: branch에 commit한 사항을 업로드 한다.</li>\n<li>git status: 현재의 상태</li>\n<li>git remote add origin: local에 있는 repository를 서버에 연결할 때 사용한다.</li>\n<li>git checkout: 해당 repository의 branch 리스트를 보여준다.</li>\n<li>git checkout { branchname }: 해당 branch로 이동한다.</li>\n<li>git log: commit한 기록들을 보여준다.</li>\n</ul>","fields":{"slug":"/posts/git_commands/","tagSlugs":["/tag/git/","/tag/terminal/"]},"frontmatter":{"date":"2019.10.04","description":"Basic Commands of terminal for git","tags":["Git","Terminal"],"title":"Git commands","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/git_commands/"}}}