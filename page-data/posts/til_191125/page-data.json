{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191125/","webpackCompilationHash":"517e0bd367c0327db6c3","result":{"data":{"markdownRemark":{"id":"6b37dd91-aaec-58aa-80d2-e28194d5711d","html":"<ol>\n<li>자바스크립트는 싱글 스레드로 작동한다. 싱글 스레드란 자바 스크립트를 실행하는 일종의 통로를 말한다. 통로가 하나이기 때문에 한번에 하나의 일만 처리할 수 있다.</li>\n<li>자바스크립트는 비동기 연산이 가능하다. 비동기 연산이란 하나의 실행 컨텍스트 안에서 동기로 처리되지 않고, 따로 처리하는 것을 말한다.</li>\n<li>Promise란 이때 발생하는 것으로, 비동기 작업이 맞이할 미래의 완료 값 혹은 실패 값을 나타낸다.</li>\n<li>Promise는 두 가지 인자를 받는다. <code class=\"language-text\">(resolved, rejected)</code> 각각 성공했을 때, 실패했을 때에 처리할 함수를 나타낸다.</li>\n<li>\n<p>Promise의 작동 순서는 다음과 같다.</p>\n<ul>\n<li>자바스크립트가 실행 컨텍스트에 콜스텍을 쌓다가 비동기 함수를 만나면 이벤트 루프에 던져놓고, promise를 받는다.</li>\n<li>동기로 처리할 일들을 마친 후, promise를 확인한다.</li>\n<li>완료 값이 나올 경우, resolved를 실행한다. 실패 했을 경우, rejected를 실행한다.</li>\n</ul>\n</li>\n<li>보통 두 개 이상의 비동기 작업을 수행해야 할 경우 이전 단계의 비동기 작업이 완료된 뒤 다음 비동기 작업을 수행해야 하는 경우가 생긴다.</li>\n<li>\n<p>이런 상황에서 <code class=\"language-text\">.then()</code> 을 이용해 chaining하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token function\">doSomethingAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> promise2 <span class=\"token operator\">=</span> <span class=\"token function\">doSomethingAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n whenSuccessCallme<span class=\"token punctuation\">,</span>\n whenFailedCallme\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>위의 방식을 사용해 편리하게 promise를 처리할 수 있다. 그러나 비동기에 대한 비동기 작업이 생기면 생길 수록, 콜백 지옥에 빠질 수 있다.</li>\n<li>\n<p><code class=\"language-text\">async/await</code>를 활용하면 이러한 콜백 지옥에서 쉽게 나올 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">return</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 함수를 async/await를 사용하면 아래와 같이 바꿀 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">printData</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">showData</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ol>\n<p><code class=\"language-text\">then().catch()</code>보다 훨씬 직관적으로 알아 볼 수 있으며, 코드가 깊어질 일도 상대적으로 적다.</p>\n<ol start=\"10\">\n<li>async는 함수를 비동기로 실행하겠다는 일종의 선언이다. await는 비동기 함수가 반환하는 Promise 객체를 기다렸다가 결과 값을 받아주겠다는 의미이다. await를 사용하면 Promise가 결과값으로 풀어질 때까지 다음 코드들도 실행되지 않고 기다리게 된다.</li>\n<li>\n<p><code class=\"language-text\">Promise.all()</code> 과 <code class=\"language-text\">Promise.all()</code>은 비동기 작업을 병렬로 실행하기 위한 구성 도구이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunction</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위처럼 반복문에서 Promise 객체를 반환해야 하는 경우 <code class=\"language-text\">Promise.all()</code>은 모든 Promise를 기다렸다가 Promise를 반환해준다. 주의할 것은 <code class=\"language-text\">Promise.all()</code>도 Promise를 반환하기 때문에 해당 함수에서 return 시에 await를 사용하거나, 해당 함수를 호출하는 곳에서 await로 받아야 한다.</p>\n</li>\n</ol>","fields":{"slug":"/posts/til_191125/","tagSlugs":["/tag/promise/","/tag/async/","/tag/await/"]},"frontmatter":{"date":"2019.11.25","description":"Promise, async and await","tags":["Promise","async","await"],"title":"TIL_191125","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191125/"}}}