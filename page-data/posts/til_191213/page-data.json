{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191213/","webpackCompilationHash":"785fede6ed6e6d94d3ed","result":{"data":{"markdownRemark":{"id":"b67b1ec4-9dfa-548f-a3b0-94227ff20f86","html":"<p>타입스크립트로 작성한 코드를 보다 보니 class를 굉장히 많이 사용한다는 생각이 들었다. class에서 Get, Set static, public, private 등의 키워드가 등장하는데 한번도 정확히 짚고 넘어간 적이 없는 것 같아 정리를 해보려 한다.</p>\n<ol>\n<li>\n<p>먼저 static methods는 클래스를 위한 정적(static) 메소드를 정의하는데 사용된다. 이 메소드는 클래스의 인스턴스화 없이도 호출되며, 오히려 인스턴스에서는 호출할 수 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> distX <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> distY <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> b<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">hypot</span><span class=\"token punctuation\">(</span>distX<span class=\"token punctuation\">,</span> distY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> point1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> point2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\npoint1<span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span>\npoint2<span class=\"token punctuation\">.</span>distance<span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span>\n\nPoint<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">,</span> point2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//7.0710678118654755</span></code></pre></div>\n<p>Point라는 클래스에서 distance 메소드는 static으로 정의되었다. 따라서 인스턴스에서 호출하게 되면 undefined가 나오게 되며 <code class=\"language-text\">Point</code>클래스에서 호출할 수 있다.  </p>\n</li>\n<li>\n<p>Getter는 객체 안에서 어떤 프로퍼티에 접근할 때, 내부 변수의 상태를 명시적인 함수 호출 없이 보여주고 싶을 때 혹은 그 값을 계산하도록 해야 할 때 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tlog<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">get</span> <span class=\"token function\">latest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>latest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"test\"</span></code></pre></div>\n<p><code class=\"language-text\">obj</code>라는 객체에 유사 프로퍼티인 latest가 있다. 이 프로퍼티는 log라는 프로퍼티의 마지막 요소를 반환한다. <code class=\"language-text\">latest</code>에는 어떤 값을 할당하려고 해도 그 값이 바뀌지 않는다.  </p>\n<p>이미 존재하는 객체에 <code class=\"language-text\">Getter</code>를 추가하고 싶을 때는 <code class=\"language-text\">Object.defineProperty()</code>를 사용하면 된다. 아래에 예시가 있다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0 + 1</span></code></pre></div>\n<p><strong>Smart Getter</strong></p>\n<p>스마트 <code class=\"language-text\">Getter</code>는 프로퍼티의 값을 나중에 접근하기 위해 캐싱한다. 값은 <code class=\"language-text\">getter</code>가 호출될 때 처음 계산되며 캐싱된다. 이후의 호출에는 다시 계산하지 않고, 캐시값을 반환한다. 따라서 <strong>계산 비용이 큰 경우,</strong> <strong>값의 이용 빈도가 낮을 경우</strong>, <strong>값이 절대 변경되지 않을 경우</strong>에 사용하면 높은 효율을 낼 수 있다. </p>\n</li>\n<li>\n<p><code class=\"language-text\">public</code> 필드는 한번 선언되면 모든 인스턴스에 존재하며 사용할 수 있다. <code class=\"language-text\">public static</code> 필드는 <code class=\"language-text\">static</code> 이라는 키워드로 사용할 수 있는데, <code class=\"language-text\">static method</code>와는 다르다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> field <span class=\"token operator\">=</span> <span class=\"token string\">'static field'</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Sample<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'static field'</span></code></pre></div>\n<p><code class=\"language-text\">public</code> 필드는 인스턴스 생성시에 추가되거나 <code class=\"language-text\">super()</code>가 호출된 직후에 추가된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n\tinstanceField <span class=\"token operator\">=</span> <span class=\"token string\">'instance field'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span>instanceField<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"instance field\"</span></code></pre></div>\n<p><code class=\"language-text\">public method</code>는 말 그대로 인스턴스에서 사용 가능한 메소드를 말한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sample</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">'Hello'</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Hello'</span></code></pre></div>\n<p><code class=\"language-text\">public</code> 필드와는 다르게 <code class=\"language-text\">public</code> 메소드에서의 <code class=\"language-text\">this</code>는 인스턴스를 바라본다. 상속 클래스의 다른 메소드를 사용하고 싶다면 <code class=\"language-text\">super</code>를 사용하면 된다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n\tgreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>greeting<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sub</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Base</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">subGreet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">.</span><span class=\"token function\">subGreet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello\"</span></code></pre></div>\n</li>\n</ol>\n<p>다음 편에 이어서…</p>","fields":{"slug":"/posts/til_191213/","tagSlugs":["/tag/class/"]},"frontmatter":{"date":"2019.12.13","description":"Understanding of Class","tags":["Class"],"title":"TIL_191213","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191213/"}}}