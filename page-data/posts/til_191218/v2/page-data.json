{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191218/v2","webpackCompilationHash":"d0242dd32f791f74bc90","result":{"data":{"markdownRemark":{"id":"2a334d9a-74a3-5f5d-9ced-6b793b4a4bd9","html":"<h3 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h3>\n<p>지금까지 많지는 않지만 RESTful API를 만들었다. 하지만 이번에 class 101에서 프로젝트를 진행하던 중, RESTful 에 대해 생각해볼 기회가 있어 이번 기회에 정리해보고자 한다.</p>\n<h4 id=\"restful-api란\"><a href=\"#restful-api%EB%9E%80\" aria-label=\"restful api란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API란</h4>\n<ol>\n<li>먼저 URI란?\n<code class=\"language-text\">Uniform Resource Identifier 해당 사이트의 특정 자원의 위치를 나타내는 유일한 주소.</code>\n<code class=\"language-text\">예를 들어, https://finance.naver.com/marketindex/</code></li>\n<li>그렇다면 HTTP Method란?\n<code class=\"language-text\">HTTP request가 의도하는 action을 정의한것.</code>\n<code class=\"language-text\">예를 들어, POST, GET 등등.</code></li>\n<li>마지막으로 Payload는?\n<code class=\"language-text\">HTTP request에서 보내는 데이터 (body)</code></li>\n</ol>\n<p><strong>REpresentational State Transfer</strong></p>\n<p>웹상에서 사용되는 여러 리소스를 HTTP URI로 표현하고, 그 리소스에 대한 행위를 HTTP Method로 정의한다.</p>\n<p>즉, 리소스(HTTP URI로 정의된)를 어떻게 한다(HTTP Method + Payload)를 구조적으로 깔끔하게 표현하는것.</p>\n<p>Method는 주로 GET과 POST만 사용한다.<br>\n<em>PUT과 DELETE 등도 사용하는 곳도 있지만, 그냥 GET과 POST만 사용하는 것이 단순하기 때문에 GET과 POST만 사용하는 추세.</em></p>\n<p>예를 들어, 회사의 비품을 관리하는데 있어서 특정 비품의 지급 혹은 대여, 그리고 반납 현황을 체크하기 위해서 필요한 URI는 하나이다.\n<code class=\"language-text\">http://api/provision</code></p>\n<p><strong>RESTful API의 장점</strong>\n여러 장점들이 있지만, 사실 그중 가장 명확한 장점은 바로 self-descriptiveness 이다.<br>\nRESTful API는 그 자체만으로도 API의 목적이 쉽게 이해가 된다.</p>\n<p>예를 들어, 위의 <code class=\"language-text\">http://item/provision</code> 요청의 경우, 문서나 주석이 없이도 <code class=\"language-text\">http://item/provision</code> 라는 API에서 지급 관련 정보를 받거나, 준다는 것을 알 수 있다.</p>\n<p><strong>RESTful API를 개발할때 유의 할점</strong>\n/(슬래시)는 계층 관계를 나타낼때 사용된다.</p>\n<p>예를 들어, <code class=\"language-text\">http://item/provision/5df8c8695c929f7bfaa47fb6</code> 이라는 구조라면, 비품들 중, <code class=\"language-text\">5df8c8695c929f7bfaa47fb6</code>를 아이디로 갖고 있는 비품의 정보만 받겠다는 의미이다.</p>\n<p>URI에 _(underscore)는 주로 포함하지않고 또한 영어 대문자보다 소문자를 쓴다. 그리고 너무 긴 단어는 잘 사용하지 않는다. 이 모든건 가독성을 높이기 위해서다.</p>\n<p>URI는 명사를 사용한다. 동사는 GET, POST 같은 HTTP Method를 통해 표현하기 때문이다.</p>","fields":{"slug":"/posts/til_191218/v2","tagSlugs":["/tag/res-tful-api/"]},"frontmatter":{"date":"2019.12.18","description":"What I learned through making restful api","tags":["RESTful API"],"title":"TIL_191218","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191218/v2"}}}