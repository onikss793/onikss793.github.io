{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191124/","webpackCompilationHash":"b50f2fca4ee1438fa041","result":{"data":{"markdownRemark":{"id":"0bbdc25c-5cf2-51ba-b91c-05a79444d26c","html":"<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Intro</strong></h2>\n<p>node.js로 코드를 짜면서 기한에 맞추기 위해 내가 원하는 input에 원하는 output만 나오도록 했다.</p>\n<p>비교적 초반에 짠 코드일수록, 리펙토링을 하거나 프로젝트가 진행되면서 추가되는 코드들 때문에 제대로 작동을 하지 않는 경우가 생겼다.</p>\n<p>테스트를 하나씩 하면서 넘어가보고 싶었으나 node.js에 익숙해지는 데에도 시간이 걸렸고 테스트에 어떠한 라이브러리를 사용해야하는지, 처음부터 공부를 해야 했기 때문에 프로젝트가 끝난 시점에서라도 다시 테스트를 만들어보고 싶은 생각이 들었다.</p>\n<h2 id=\"mocha\"><a href=\"#mocha\" aria-label=\"mocha permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>mocha</strong></h2>\n<p>Mocha는 단순히 테스트를 실행하는 도구일 뿐이다. 어떠한 의미인지는 코드를 보면 조금 더 쉽게 이해할 수 있다.</p>\n<p>terminal에서 테스트를 실행하는 명령어를 사용하기 위해 먼저 mocha를 global에 설치해주었다.</p>\n<p>해당 프로젝트의 package.json에도 추가될 수 있도록 설치해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"assert\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"checks equality\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>assert는 node.js 자체에 있는 라이브러리이다. 가장 기본적으로 mocha가 어떤 식으로 작동하는지 보기 위한 코드이다.</p>\n<p>terminal에서 <code class=\"language-text\">mocha test</code>라는 명령어를 실행하면</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  sample test\n    ✓ checks equality\n\n  <span class=\"token number\">1</span> <span class=\"token function\">passing</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span>ms<span class=\"token punctuation\">)</span></code></pre></div>\n<p>라는 응답이 온다. 내가 무슨 테스트를 실행했는지, 무엇을 확인하는 테스트인지를 정확하게 입력하는 것이 중요하다.</p>\n<p>참고로 화살표 함수는 사용하지 않는다. 왜냐하면 mocha의 실행 컨텍스트 안에서 this로 접근하는 것이 가능한데 만약 화살표 함수를 쓴다면 해당 함수의 this 가 다른 함수에 종속될 수 있기 때문이다.</p>\n<h2 id=\"chai\"><a href=\"#chai\" aria-label=\"chai permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Chai</strong></h2>\n<p>chai는 assert와 똑같은 기능을 한다. 하지만 더 좋은 가독성을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> chai <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"chai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> expect <span class=\"token operator\">=</span> chai<span class=\"token punctuation\">.</span>expect<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sample test\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"checks equality\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위와 같이 chai.expect를 사용해서 훨씬 가독성 높은 테스트를 작성할 수 있다.</p>","fields":{"slug":"/posts/til_191124/","tagSlugs":["/tag/project/","/tag/test/"]},"frontmatter":{"date":"2019.11.24","description":"Things I've learned through project","tags":["Project","test"],"title":"TIL_191124","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191124/"}}}