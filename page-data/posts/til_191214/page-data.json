{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191214/","webpackCompilationHash":"db17b2749526d70d3886","result":{"data":{"markdownRemark":{"id":"ef7b2cef-695a-5ce8-ad72-cdeb9fbb948d","html":"<h3 id=\"excel-파일-업로드-하기featnodejs\"><a href=\"#excel-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C-%ED%95%98%EA%B8%B0featnodejs\" aria-label=\"excel 파일 업로드 하기featnodejs permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Excel 파일 업로드 하기(feat:Node.js)</h3>\n<h4 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h4>\n<p>Class101 인사팀의 비품 관리 어플리케이션을 만들다보니 일반 사무 업무에서 엑셀을 많이 사용하는만큼 엑셀 파일을 업로드하고 다운로드하는 기능의 중요성을 체감하게 되었다. 엔드 유저가 엑셀 업로드, 다운로드 기능의 필요성을 원했던 이유는 현재 존재하지 않는 DB를 추후에 한번의 엑셀 파일 업로드로 DB를 구축하고 싶었기 때문이다(그렇지 않으면 일일이 적어 넣어야 한다). 때문에 엑셀을 서버에 업로드하고, 현재 DB를 엑셀 파일로 만들어 전송하는 기능을 추가해야만 했다.</p>\n<h4 id=\"업로드\"><a href=\"#%EC%97%85%EB%A1%9C%EB%93%9C\" aria-label=\"업로드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>업로드</h4>\n<p>사실 백앤드 서버에서 파일을 전송 받는 것 자체는 하나도 어려울 것이 없다. 문제는 엑셀에 적혀 있는 데이터를 현재 모델링 되어 있는 스키마에 맞도록 일종의 알고리즘을 짜야 한다는 것이다.</p>\n<p>알고리즘에 대해서는 어플리케이션이 1차 완성이 된 후에 적어보기로 하고, 우선은 업로드해서 <em>코드카타</em>를 할 수 있는 데이터 형태로 변환하는 것부터 해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Server</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> csv <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uploadCsv</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> file <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fileName <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n  file<span class=\"token punctuation\">.</span><span class=\"token function\">mv</span><span class=\"token punctuation\">(</span><span class=\"token string\">'csv/'</span> <span class=\"token operator\">+</span> fileName<span class=\"token punctuation\">,</span> <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    err <span class=\"token operator\">?</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">csv/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>fileName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span><span class=\"token function\">csv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> cell <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'소속'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> member <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span><span class=\"token string\">'사용자'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>우선 <code class=\"language-text\">csv-parser</code>라는 모듈과 <code class=\"language-text\">Node.js</code>의 file system 모듈을 사용하여 csv를 읽을 수 있도록 했다. 우선 프론트 앤드 서버에서 파일을 전송받게 되면, <code class=\"language-text\">req.files</code>에서 확인할 수 있다. <code class=\"language-text\">console.log(req.files)</code>로 어떠한 정보들이 오는지 확인할 수 있고, 어떠한 KEY에 담겨 있는 데이터들과 <code class=\"language-text\">&lt;Buffer&gt;</code>를 확인할 수 있을 것이다. 우선 csv를 사용해 데이터를 읽으려면 로컬에 저장해두는 것이 편하기 때문에 <code class=\"language-text\">file.mv()</code>를 사용해 원하는 디렉토리에 저장한다. 그리고 <code class=\"language-text\">stream</code>을 만든다. 이를 통해 Readable Stream을 Writable Stream으로 변환한다. 이때 사용되는 메소드가 <code class=\"language-text\">stream.pipe()</code>이다. 이어서 <code class=\"language-text\">on()</code>이라는 메소드에 여러가지 키워드를 첫번째 인자로 받을 수 있는데, “data”를 사용하여 콜백으로 미리 만들어둔 <code class=\"language-text\">result</code>라는 배열에 push해 마음껏 사용할 수 있도록 만든다.</p>\n<h4 id=\"나가며\"><a href=\"#%EB%82%98%EA%B0%80%EB%A9%B0\" aria-label=\"나가며 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나가며</h4>\n<p>사실 이 다음부터는 어떻게 사용하느냐에 따라 여러가지 이용 방법을 적용할 수 있다. 매우 간단하지만 사무 업무에 대한 어플을 만들 때라면 유용하게 사용할 수 있을 것 같다. 더불어 기존에 Excel로만 작성되어 있는 파일을 토대로 DB를 구축할 때도 사용할 수 있을 것 같다.</p>","fields":{"slug":"/posts/til_191214/","tagSlugs":["/tag/uploading-csv/"]},"frontmatter":{"date":"2019.12.14","description":"How to upload csv file in node.js","tags":["Uploading CSV"],"title":"TIL_191214","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191214/"}}}