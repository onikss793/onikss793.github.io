{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191110/","webpackCompilationHash":"902954af2ce1de1f345f","result":{"data":{"markdownRemark":{"id":"70a19c44-964f-5b2a-a65c-b1a474dc8579","html":"<p>프로젝트를 마무리하면서, 내가 만들었던 페이지에 대한 endpoint를 node.js로 간략하게 만들어보았다.</p>\n<p>기존의 웹 사이트는 <code class=\"language-text\">회원가입 -&gt; 그룹 생성 -&gt; 이벤트 생성</code> 이라는 조금 복잡한 절차를 필요로 하지만, 내가 만들었던 페이지는 ‘이벤트 생성’과 그 이벤트에 대한 ‘상세 페이지’이므로 그룹에 관련한 부분은 생략했다.</p>\n<p><strong>1. 서버 생성</strong><br>\nnode.js는 굉장히 express를 통해 (이름 그대로) 빠른 속도로 서버를 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PORT</span> <span class=\"token operator\">||</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listening to \"</span> <span class=\"token operator\">+</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>express에 있는 http 모듈을 사용하면 <code class=\"language-text\">http.createServer()</code>만으로 서버를 생성할 수 있다.</p>\n<p>port에 관해서, 3000은 <code class=\"language-text\">localhost:3000</code>을 이용한다는 말이다.</p>\n<p><code class=\"language-text\">process.env.PORT</code>는 환경 변수에서 설정한 PORT를 사용하겠다는 말이다.</p>\n<p><code class=\"language-text\">dotenv</code>라는 라이브러리를 사용해서 <code class=\"language-text\">.env</code> 파일을 생성하고 <code class=\"language-text\">PORT = 3030</code>라고 선언하면 된다. 추가적으로 MONGODB<em>URI나 API</em>KEY 같은 것들을 선언해 사용할 수 있다. 그리고 git에 업로드할 경우, 반드시 <code class=\"language-text\">gitignore</code>에 <code class=\"language-text\">.env</code>를 추가해 노출을 막아야 한다.</p>\n<p><strong>2. 모델링</strong><br>\n<strong>Users</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> userSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  _id<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n  username<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> unique<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  image<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  group<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Events\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  eventsAttend<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Events\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>mongoose는 Schema를 이용해 schema를 손쉽게 만들 수 있다.</p>\n<p>type과 기타 옵션은 공식 문서에 잘 나와있다.</p>\n<p>Mongo DB는 No sql 이기 때문에 데이터 테이블 간의 관계에서 자유롭지만, ref를 통해 서로 관계를 설정해주는 것은 가능하다.</p>\n<p>후에 populate로 해당 도큐멘트를 모두 불러올 수 있다.</p>\n<p><strong>Events</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> eventSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  _id<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mainImage<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  introduction<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  findGroup<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  lat<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  lng<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  startDate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  endDate<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  limitUser<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Number<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  host<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Users\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  attenddees<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span> ref<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Users\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  createdAt<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  address<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> first<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">:</span> String <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>mongoose에서 자체적으로 지원하는 created, updated date option이 있다.</p>\n<p>이번에는 <code class=\"language-text\">Date</code>이라는 type을 이용해 <code class=\"language-text\">default: Date.now()</code>, 그러니까 기본값으로 도큐멘트가 생성되는 시점을 적용했다.</p>\n<p>이벤트는 주최자, 참여자 모두 Users 도큐멘트와 상관 관계가 있는데, 주최자는 한명이지만 참여자는 여럿이므로<br>\n<code class=\"language-text\">attenddees: [{ type: Schema.Types.ObjectId, ref: &quot;Users&quot; }]</code>\n배열 안의 하나의 User 도큐멘트가 존재하도록 했다.</p>","fields":{"slug":"/posts/til_191110/","tagSlugs":["/tag/project/","/tag/mongo-db/","/tag/node-js/","/tag/express/"]},"frontmatter":{"date":"2019.11.10","description":"Things I've learned through project","tags":["Project","Mongo DB","node.js","express"],"title":"TIL_191110","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191110/"}}}