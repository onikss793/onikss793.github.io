{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191026/","webpackCompilationHash":"962a9f570e5f30c8320a","result":{"data":{"markdownRemark":{"id":"f93c902f-e40f-5a45-8dec-07a89aeee91b","html":"<p>django에서 암호화에 대해 공부하다 보니 드는 의문점들을 정리해보았다.</p>\n<h3 id=\"해싱이란\"><a href=\"#%ED%95%B4%EC%8B%B1%EC%9D%B4%EB%9E%80\" aria-label=\"해싱이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해싱이란?</h3>\n<p>대부분의 탐색 방법들은 탐색 키를 저장된 키 값과 반복적으로 비교하면서(반복문의 개념) 탐색을 원하는 항목에 접근한다.</p>\n<p>반면 해싱은 키 값(배열의 인덱스라고 생각하면 된다)에 직접 산술적인 연산을 적용하여 항목이 저장되어 있는 테이블의 주소를 계산하여 항목에 접근한다.</p>\n<p>이렇게 키 값의 연산에 의해 직접 접근이 가능한 구조를 해시 테이블(hash table)이라 부르고, 해시 테이블을 이용한 탐색을 해싱(hashing)이라 한다.</p>\n<p><strong>해시 함수</strong>란 탐색 키 <em>(인덱스의 역할을 하지만 문자열이거나 굉장히 큰 숫자이기 때문에 바로 인덱스로 활용하기에는 문제가 있다)</em>를 입력으로 받아 <strong>해시 주소</strong>를 생성하고 이 해시 주소가 <strong>배열로 구현된 해시 테이블</strong>의 인덱스가 된다.</p>\n<p>이 배열의 인덱스 위치에 자료를 저장할 수도 있고 저장된 자료를 꺼낼 수도 있다.</p>\n<p><em>(예를 들어 영어 사전을 배열 hashTable[]에 저장한다고 하면 단어을 해싱 함수를 이용하여 적절한 정수 i로 변환한 다음, 배열 요소 hashTable[i]에 단어의 정의를 저장하는 것이다)</em></p>\n<p><strong>궁금증</strong></p>\n<ul>\n<li>해싱하기 전, 바이트화 하는 이유는?</li>\n<li>바이트한 후 해싱을 했다. 그렇다면 db에 저장할 때 다시 디코딩하는 이유는?</li>\n</ul>\n<hr>\n<p>아래는 장고 서버와 다른 서버가 통신할 때 필요한 django cors 기본 세팅이다. 참고로 모든 서버에 오픈되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">CORS_ALLOW_HEADERS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'accept'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'accept-encoding'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'authorization'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'content-type'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'dnt'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'origin'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'user-agent'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'x-csrftoken'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'x-requested-with'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\nCORS_ORIGIN_ALLOW_ALL <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\nCORS_ALLOW_CREDENTIALS <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<h3 id=\"fetch\"><a href=\"#fetch\" aria-label=\"fetch permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Fetch</strong></h3>\n<p>백앤드 서버, 프론트 앤드의 서버가 각각 필요하다. 백앤드 서버의 ip주소를 알면 프론트 앤드 서버에서 해당 ip 주소를 통해 api를 호출할 수 있다.</p>\n<p>자바 스크립트는 비동기로 작동하기 때문에 fetch를 하게 되면 응답을 기다리기 전에 다른 함수로 넘어간다. 여기서 then을 쓰게 되면 fetch의 응답을 기다렸다가 then()안에 있는 함수를 실행시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/account/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      user_name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>idValue<span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>pwValue\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> history <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userToken\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        history<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>then()안에 있는 json()함수를 사용하면 body에 있는 내용만 json 형태로 변환된다. 그 다음의 then 함수 안에 있는 함수를 통해 원하는 작업을 할 수 있다.</p>\n<p>만약 백앤드 서버에서 200을 보내면 그것을 조건으로 삼아서 로컬 스토리지 등에 토큰을 저장하고 메인 페이지(다음 페이지)로 넘어갈 수 있다.</p>\n<p>로그인하는 시점에서 백엔드 서버에서 토큰을 발행 받는다. 그리고 브라우저의 local storage, session storage cookie에 각각 기획의 특성에 맞게 저장한다.</p>\n<p>그리고 로그인 상태에서 하는 액션에 대해 api 요청을 보낼 때마다 header에 토큰을 담아서 보내, 백앤드 서버에서 사용자를 구분할 수 있도록 한다.</p>\n<p>Authorization 이라는 key에 담아서 토큰을 보낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">updateComments</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/main\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> Authorization<span class=\"token punctuation\">:</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userToken\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      comment_text<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>comments<span class=\"token punctuation\">.</span>desc\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>comment를 데이터 베이스에 업로드 하고 이어서 getComment 메서드를 다시 실행시켜 새로운 comment도 render시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">getComments</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8000/main\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> commentInfo<span class=\"token punctuation\">:</span> res <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/til_191026/","tagSlugs":["/tag/til/","/tag/django/"]},"frontmatter":{"date":"2019.10.26","description":"What I learned today","tags":["TIL","Django"],"title":"TIL 191026","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191026/"}}}