{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191126/","webpackCompilationHash":"fae114cb7e70b0c957fe","result":{"data":{"markdownRemark":{"id":"c237c00b-e014-5d87-b46c-8385a74e3586","html":"<h2 id=\"what-is-typescript\"><a href=\"#what-is-typescript\" aria-label=\"what is typescript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is typescript</h2>\n<p>2010년 처음 Anders Hejlsberg가 타입스크립트를 개발하기 시작해 2012년 처음 출시되었다. 많은 사람들이 주목했고, 호의적이었으나 주요 IDE의 지원이 미비했기 때문에 자바스크립트 커뮤니티에 크게 반영되지는 않았다. 그 후로 점차 인기를 끌기 시작했고, 지금은 엄청난 인기를 누리고 있다.</p>\n<p>타입스크립트는 자바스크립트의 superset으로 해당 언어의 모든 요소를 가지고 있는 객체 지향 언어이다.</p>\n<p>TypeScript Compiler를 통해 .ts => .js 로 변환한다.</p>\n<h2 id=\"why-typescript\"><a href=\"#why-typescript\" aria-label=\"why typescript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why typescript</h2>\n<p>타입스크립트는 자바스크립트 코드를 간단하게 만들어주어 더 나은 가독성과 디버깅의 기회를 제공한다.</p>\n<p>타입스크립트는 자바스크립트 IDE에서 굉장히 생산적인 툴들을 제공한다(static check)</p>\n<p>타입스크립트는 ES6 문법을 모두 지원한다.</p>\n<p>타입스크립트는 자바스크립트로 코드를 작성하면서 겪는 고통스러운 타입 에러에서 쉽게 벗어나도록 도와준다.</p>\n<p>타입스크립트는 완전히 다른 언어가 아닌, 조금 더 발전된 형태의 자바스크립트일 뿐이다.</p>\n<h2 id=\"basic-grammars\"><a href=\"#basic-grammars\" aria-label=\"basic grammars permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>basic grammars</h2>\n<ol>\n<li>function</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">greeter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'hello'</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token string\">'Greg'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">greeter</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>인자로 받는 값의 타입을 지정해줘야 한다.</p>\n<ol start=\"2\">\n<li>class</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n  fullName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\"><span class=\"token keyword\">public</span> firstName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">public</span> middleInitial<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">public</span> lastName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>fullName <span class=\"token operator\">=</span> firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> middleInitial <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> lastName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>클래스의 property의 타입을 모두 지정해주어야 한다.</p>\n<p>public를 constructor 안에서 사용하면 해당 이름과 일치하는 property를 자동으로 생성할 수 있다.</p>\n<ol start=\"3\">\n<li>interface</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">'size ten object'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>어떤 객체가 있을 때, 그 안에 있는 key를 개별적으로 사용할 때가 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">printLabel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">labeledObj<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> label<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런 식으로 받은 인자가 객체이고, 그 중에 어떤 property를 사용할 것인지에 따라 모두 타입을 지정해주어야 한다.</p>\n<p>하지만 interface를 사용하면</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LabeledValue</span> <span class=\"token punctuation\">{</span>\n  size<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  label<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">printLabel2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">labeledObj<span class=\"token punctuation\">:</span> LabeledValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>labeledObj<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>사용할 객체의 타입을 우선적으로 정의한 다음, 인자의 타입 정의에 해당 interface를 써줄 수 있다.</p>","fields":{"slug":"/posts/til_191126/","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2019.11.26","description":"Introduction to typescript","tags":["typescript"],"title":"TIL_191126","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191126/"}}}