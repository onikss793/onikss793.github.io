{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191025/","webpackCompilationHash":"785fede6ed6e6d94d3ed","result":{"data":{"markdownRemark":{"id":"ae952fb9-e067-5435-9260-677e155bad9a","html":"<h4 id=\"authentification\"><a href=\"#authentification\" aria-label=\"authentification permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Authentification</strong></h4>\n<p>Authentification이란 요청을 보내는 사용자를 신뢰할 수 있는지, 그 권한 여부를 판단하는 메커니즘을 이야기한다.</p>\n<p>django는 기본적으로 django.auth를 제공한다. 하지만 그 원리를 조금 더 익혀보고자 bcrypt와 jwt를 이용해 인증과 인가를 연습해보려 한다.</p>\n<p>우선 View에서 bcrypt와 jwt를 사용하려면 install을 먼저 해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">pip install bcrypt\npip install jwt</code></pre></div>\n<p>위 명령어를 이용하면 설치할 수 있다. 참고로 프로젝트의 가상환경 내에서 설치해야 한다는 것을 잊지 말아야 한다.</p>\n<p><strong>회원가입</strong></p>\n<p>기본적인 회원가입에 필요한 데이터 중, 비밀번호는 반드시 암호화해서 데이터베이스에 저장되어야 한다. 먼저 받은 비밀번호를 byte로 인코딩한다. byte로 \b인코딩된 값은 <code class=\"language-text\">b&#39;sss</code> 로 표시된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">byte_pw       <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>signup_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 byte된 비밀번호를 hashing 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">hashed_pw     <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span>byte_pw<span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>까먹지 안아야 하는 점은 데이터 베이스에 저장할 때는 디코딩(‘utf-8’)해서 저장한다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">Users<span class=\"token punctuation\">(</span>\n      name      <span class=\"token operator\">=</span> signup_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      user_name <span class=\"token operator\">=</span> signup_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      password  <span class=\"token operator\">=</span> hashed_pw<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>로그인</strong></p>\n<p>로그인을 할 때는 bcrypt에 있는 checkpw()라는 메서드를 사용한다. 인자로는 <code class=\"language-text\">checkpw(입력한 비밀번호, db에 있는 비밀번호)</code> 이렇게 받는데 주의할 점은 입력한 비밀번호, db에 있는 비밀번호 모두 ‘utf-8’ 방식으로 인코딩해야 한다는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n    user <span class=\"token operator\">=</span> Users<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>user_name<span class=\"token operator\">=</span>login_data<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code></pre></div>\n<p>위처럼 checkpw 메서드의 인자는 반드시 인코딩한 값이 들어가야 한다.\n비밀번호가 일치했다면 프론트앤드 서버로 웹토큰을 발행해주어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"py\"><pre class=\"language-py\"><code class=\"language-py\">    payload           <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">:</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"exp\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"Oct 25 2019 18:29:52 GMT+0900\"</span><span class=\"token punctuation\">}</span>\n    encryption_secret <span class=\"token operator\">=</span> <span class=\"token string\">\"secret\"</span>\n    algorithm         <span class=\"token operator\">=</span> <span class=\"token string\">\"HS256\"</span>\n    encoded           <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> encryption_secret<span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span>algorithm<span class=\"token punctuation\">)</span></code></pre></div>\n<p>jwt를 사용하면 Base64URL로 인코딩을 할 수 있다. 위의 내용을 이해하기 위해서는 먼저 jwt의 구조를 알아야 한다.<br>\n각각은 . 으로 구분되어 있다. 먼저 1번으로 header가 있다. <code class=\"language-text\">{ &quot;typ&quot;:&quot;JWT&quot;, &quot;alg&quot;:&quot;HS256&quot; }</code> 이와 같은 형태로 Token type(JWT), 해시알고리즘을 담고 있다.<br>\n2번으로 payload, 사용자 정보(중요한 정보, 사용자 이름 등은 절대로 담으면 안 된다)가 담겨 있다.<br>\n3번째로 signature, JWT가 원본 그대로라는 것을 확인할 때 사용되는 부분으로써, header, payload 그리고 secret key가 해싱되어 있다.</p>\n<p>jwt.encode에는 총 3개의 인자를 받을 수 있는데 첫번째는 payload, 즉 담을 내용을 말한다. user.id를 넣을 수 있다. 두번째는 encryption_secret, 다시 말해 암호화할 secret key를 말한다. 세번째로 암호화할 때 사용할 알고리즘을 지정한다. 로그인 후, 프론트엔드 서버와 토큰을 주고 받으며 통신하는 부분은 다음 편에 이어서 적도록 하겠다.</p>\n<h3 id=\"react-native-navigation\"><a href=\"#react-native-navigation\" aria-label=\"react native navigation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>React Native Navigation</strong></h3>\n<p>Drawer Navigation 왼쪽에 navigation 바가 생긴다. (옷장 문여는 것 같아서 생긴 이름인 것 같다).</p>\n<p>bottomTabNavigation 화면 하단에 navigation 바가 생긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">HomeStack<span class=\"token punctuation\">.</span>navigationOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  tabBarLabel<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Home\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">tabBarIcon</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> focused <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>TabBarIcon\n      focused<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>focused<span class=\"token punctuation\">}</span>\n      name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n        Platform<span class=\"token punctuation\">.</span><span class=\"token constant\">OS</span> <span class=\"token operator\">===</span> <span class=\"token string\">\"ios\"</span>\n          <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ios-information-circle</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>focused <span class=\"token operator\">?</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"-outline\"</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">:</span> <span class=\"token string\">\"md-information-circle\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">`ios-information-circle${focused ? &#39;&#39; : &#39;-outline&#39;}`</code> => React Native에서 제공하는 기본적인 icon들이 있는데(expo vetor icons) 이것들을 이름만 바꾸면 이용할 수 있다.</p>","fields":{"slug":"/posts/til_191025/","tagSlugs":["/tag/til/","/tag/django/","/tag/react-native/"]},"frontmatter":{"date":"2019.10.25","description":"What I learned today","tags":["TIL","Django","React Native"],"title":"TIL 191025","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191025/"}}}