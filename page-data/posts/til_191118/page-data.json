{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191118/","webpackCompilationHash":"517e0bd367c0327db6c3","result":{"data":{"markdownRemark":{"id":"c0185777-f310-5772-8a16-7b87f1b8afbe","html":"<h2 id=\"folder-structure\"><a href=\"#folder-structure\" aria-label=\"folder structure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Folder Structure</strong></h2>\n<p>Node.js로 서버를 생설할 때, 몇 가지 웹 프레임워크를 사용하면 빠르게 백앤드 서버를 구축할 수 있다. 그 중에서 가장 많이 쓰이는 것이 express이다. 하지만 django와 다르게 이용자에게 강제하는 Folder Structure이 없기 때문에 어떤 식으로 구조를 짜느냐에 따라, 코드, 로직이 달라질 수 있다.</p>\n<p>이번 프로젝트에서는 app.js와 server.js를 제외하고 크게 models, routes, controllers, services, middleware 나누었다.</p>\n<h3 id=\"models\"><a href=\"#models\" aria-label=\"models permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>models</strong></h3>\n<p>데이터 베이스로 mongo db를 사용했다. mongoose를 사용해 모델의 스키마를 생성할 수 있다. models 폴더 안에 각각의 모델들을 mongoose.Schema를 이용해 구조를 짜면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Schema <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> categorySchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  _id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  title<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  iconUrl<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> String<span class=\"token punctuation\">,</span> required<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Category\"</span><span class=\"token punctuation\">,</span> categorySchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>_id는 mongoose에서 기본적으로 생성해준다. 하지만 위의 경우, 데이터 크롤링할 때 반드시 일치해야하는 아이디가 있어 직접 적어주었다.</p>\n<p><code class=\"language-text\">{}</code> 안에 여러 옵션들이 있다. 위에서 사용한 것은 가장 자주 사용할 법한 것들이고, 이외에도 많은 옵션이 있음으로 적절히 사용하면 효과적으로 스키마를 짤 수 있다.</p>\n<h3 id=\"routes\"><a href=\"#routes\" aria-label=\"routes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>routes</strong></h3>\n<p>폴더 내의 index.js에서 각 endpoint에 해당하는 경로를 설정해 줄 수 있다.</p>\n<p>다음은 index.js이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> categoryRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./category\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bannerRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./banner\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> collectionRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./collection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">router</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">app</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/category\"</span><span class=\"token punctuation\">,</span> categoryRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/banner\"</span><span class=\"token punctuation\">,</span> bannerRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/collection\"</span><span class=\"token punctuation\">,</span> collectionRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>보다시피 router를 하나의 function으로 만들었다. <code class=\"language-text\">express.router()</code>이 아니라 그냥 함수이다.</p>\n<p>app.js 에서 이 함수를 이용해 <code class=\"language-text\">routes(app)</code>를 통해 모든 경로를 실행해 줄 수 있다. app.js에서 무수히 많아질 수 있는 routes를 효과적이고, 가독성 높게 해결할 수 있는 방법이다.</p>\n<p>다음은 categoryRouter의 코드이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> categoryController <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"controllers/category\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> categoryController<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:categoryId\"</span><span class=\"token punctuation\">,</span> categoryController<span class=\"token punctuation\">.</span>single<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span></code></pre></div>\n<p>RESTful 엔드포인트를 효과적으로 정리해서 파악할 수 있다. category에 해당하는 모든 api요청은 <code class=\"language-text\">http://ip/category</code>에 이어서 작성해주면 되는 것이다.</p>\n<h3 id=\"controllers\"><a href=\"#controllers\" aria-label=\"controllers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>controllers</strong></h3>\n<p>controllers는 데이터 베이스와 비즈니스 로직을 연결하는 역할을 한다. 비즈니스 로직이란 요청을 받는 순간에서부터 응답을 보내는 사이의 로직을 말한다.</p>\n<p>간결하게 처리하기 위해 services라는 폴더를 만들어 비즈니스 로직을 모아 두었다.</p>\n<p>그래서 controllers에는 요청과 응답만을 최대한 간결하게 작성하도록 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">single</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> categoryId <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>categoryId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> services<span class=\"token punctuation\">.</span><span class=\"token function\">getProductByCategory</span><span class=\"token punctuation\">(</span>categoryId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">:</span> response <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token punctuation\">:</span> err<span class=\"token punctuation\">.</span>message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위에서 볼 수 있듯이 요청에 대한 응답을 이끌어내는 비즈니스 로직은 따로 분리해 반환한 값만을 이용한다.</p>\n<h3 id=\"services\"><a href=\"#services\" aria-label=\"services permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>services</strong></h3>\n<p>services에는 비즈니스 로직을 분리해두면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Product <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"models/product\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"common\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getProductByCategory</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">categoryId</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Product<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> categoryId<span class=\"token punctuation\">:</span> categoryId <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"title _id coverImageUrl wishlistedCount feedbackCount feedbackGoodCount willOpenAt \"</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">getResponseForList</span><span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>services에서 try, catch를 이용해 에러를 헨들링할 수도 있겠지만, 이 외에도 요청부터 응답 사이에 여러가지 이유로 에러가 날 수 있기 때문에 services에는 최대한 로직만을 간결하게 작성하도록 한다.</p>","fields":{"slug":"/posts/til_191118/","tagSlugs":["/tag/project/","/tag/node-js/"]},"frontmatter":{"date":"2019.11.18","description":"Things I've learned through project","tags":["Project","Node.js"],"title":"TIL_191118","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191118/"}}}