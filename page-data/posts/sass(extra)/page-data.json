{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/sass(extra)/","webpackCompilationHash":"eaf64cf468e42f1fd2de","result":{"data":{"markdownRemark":{"id":"17a387d7-a54f-5a60-b645-07590c1c6948","html":"<h2 id=\"sass\"><a href=\"#sass\" aria-label=\"sass permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>SASS</strong></h2>\n<p>Sass란 무엇일까?<br>\nSass는 css와 같은 stylesheet 언어로, css로 해석 및 컴파일되는 스크립트 언어이다. scss는 sass의 새로운 버전으로 css와 비슷한 블록 형식을 사용한다. 또한 변수, 네스팅, mixin, 셀렉터 상속 등을 사용할 수 있어 마치 프로그래밍 언어처럼 사용할 수 있어 편리하게 css를 작성할 수 있다. 테마 컬러나 border등, 디자인의 통일성이 필요한 것에 사용할 때 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$deFont: 12px;\n$smlFont: 8px;\n$btnColor: #3897f0;\n$border: 1px solid rgb(199, 199, 199);</code></pre></div>\n<p>위와 같이 변수 설정이 가능해서 <code class=\"language-text\">@import [name]</code>와 같이 재사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@function sum($numbers...) {\n  $sum: 0;\n  @each $number in $numbers {\n    $sum: $sum + $number;\n  }\n  @return $sum;\n}\n\n.micro {\n  width: sum(50px, 30px, 100px);\n}</code></pre></div>\n<p>이처럼 함수 선언도 가능하다. border같은 경우 유용하게 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">%input-style {\n  font-size: 14px;\n}\n\n.input-black {\n  @extend %input-style;\n\n  color: black;\n}\n\n.input-red {\n  @extend %input-style;\n\n  color: red;\n}</code></pre></div>\n<p>%는 extend 전용 selector로 자신은 컴파일되지 않고 상속만을 위해 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@mixin circle($size) {\n  width: $size;\n  height: $size;\n  border-radius: 50%;\n}\n\n.box {\n  @include circle(100px);\n\n  background: #f00;\n}</code></pre></div>\n<p>mixin은 extend와 별 차이가 없어보이지만, argument를 사용할 수 있다는 점이 다르다. 사용 빈도가 높은 마크업을 사전에 정의하여 사용할 때 유용하다. 오히려 function과 더 유사해보이기도 한다. 그러나 function은 값을 return하는데 반해, mixin은 style markup자체를 return한다.</p>","fields":{"slug":"/posts/sass(extra)/","tagSlugs":["/tag/sass/"]},"frontmatter":{"date":"2019.10.21","description":"Introductino to Sass","tags":["SASS"],"title":"Sass(Extra)","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/sass(extra)/"}}}