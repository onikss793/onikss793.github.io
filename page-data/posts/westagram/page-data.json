{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/westagram/","webpackCompilationHash":"9cb267507f964e427af7","result":{"data":{"markdownRemark":{"id":"e65fb2fa-6b1b-5813-94b3-38acf048d6f7","html":"<h4 id=\"1-login-page\"><a href=\"#1-login-page\" aria-label=\"1 login page permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>1. LogIn Page</strong></h4>\n<ul>\n<li>기본적인 Layout을 짜기 전에 margin과 padding 등을 일일이 계산하지 않도록 <code class=\"language-text\">* { box-sizing: border-box }</code> 를 사용했다.</li>\n<li>로그인을 전체적으로 감싸고 있는 div를 만든 뒤, Logo - Id&#x26;Password Form - footer(비밀번호 찾기)로 구성했다. 그러나 다시 생각해보니 footer는 document의 맨 아래 위치한 section이기 때문에 적절치 않은 태그인 것 같다. div로 바꾸어도 무방할 듯하다.</li>\n<li>전체적인 정렬을 위해서 <code class=\"language-text\">{ display: flex }</code> 와 함께 justify-content, align-items등을 사용했는데, flex는 정말이지 유용하다. 아무 생각 없이 했던 것 중 하나가 <code class=\"language-text\">{ display: absolute }</code>를 남발한 것인데, 세부적인 div가 아닌 이상 전체적인 layout에 사용하는 것은 좋지 않은 것 같다. 페이지의 크기 변화에 망가지기 일쑤였고, width와 height의 추가, 수정을 할 때마다 확인해주어야 했기 때문이다.</li>\n</ul>\n<p><strong>javascript</strong></p>\n<ul>\n<li>주어진 assignment는 ID와 Password에 2글자 이상 쳤을 때만 Button이 활성화되고 Submit이 이루어지게 하는 것이었다. 맨 처음에는 onchange event인 줄 알고, 계속 작업을 했는데 도무지 작동을 하지 않아 원인을 알 수가 없었다. 그러다 알게 된 사실은 React에서는 onchange이지만 javascript에서는 그냥 change라는 것이었다.<br>\n하지만 change로 완성한 뒤에도 문제가 생겼다. 해당 input 박스에서 focus out 되어야만 함수가 작동한다는 것이었다. 찾아보니 focus에 관련한 자세한 event가 많았으며, input박스에서 일어나는 변화에 즉각 반응하는 event를 생성하려면 change가 아닌 input event가 필요하다는 것을 알게 되었다.</li>\n<li>사용한 방법은 크게 보면 두 가지이다. ID와 Password에 값이 없을 때는 false라는 상태 값을 부여하고, input event로 인해 true로 변경되었을 때, active라는 css값을 통해 버튼을 활성화 시키는 것이다. 쉽게 간과하고 넘어갈 수 있는 것은 활성화까지만을 목표로 접근한다는 점이다. 항상 활성화와 함께 비활성화는 어떻게 할 것인지, else에 관한 부분을 고려해야 한다.</li>\n</ul>\n<h4 id=\"2-main-page\"><a href=\"#2-main-page\" aria-label=\"2 main page permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>2. Main Page</strong></h4>\n<ul>\n<li>\n<p>main page를 만들고 난 뒤, 여러모로 느낀 점이 많았다. 첫번째는 전체적인 layout에 대한 설계 없이 머릿속으로만 구상하면서 만들다보니 완성한 뒤에 쓸모 없어 보이는 tag, 비효율적인 id, class, img와 background image 사이에서의 전무한 고민 등 여러가지 문제점을 많이 느꼈다.</p>\n<p>첫번째로 전체적인 구성을 어느정도 완성하지 않으면, tree구조로 이루어져 있는 HTML에서 자칫 불필요한 열대 우림을 만들 수 있다는 점이다. 더불어 tag 이름에 대한 충분한 고민이 없기 때문에 부정확하고, 직관적이지 않은 tag를 남발할 수 있다.</p>\n<p>두번째로 id와 class에 대한 사전 설계가 정말 중요한 것 같다. 오랜 기간 축적된 경험이 있다면 어느 정도 규모의 tree는 감당할 수 있겠지만 경험이 없는 상태에서 무작정 tree를 만들다보면 때론 불필요하고, 때론 직관적이지 않은 id, class를 만들게 되고 결국 후에 logic을 작성할 때 부메랑이 되어 돌아온다는 것을 알게 되었다. 또한 css의 작성 과정에서도 id, class의 점수값에 따른 반영 차이 때문에 중간에 id &#x3C;-> class를 변경해야 될 때도 있었는데, 다행히 복잡하지 않은 단순한 page였기에 가능한 것이지 실제로 프로젝트 중에 이런 일이 발생한다면 더 큰 일이 생기 수도 있겠다는 생각이 들었다.</p>\n<p>세번째로 아직 span이나 div에 background image / 그냥 image tag 사이에 어떠한 선택을 해야하는지에 대한 명확한 기준이 없다. 단순하게 HTML 안에서 img를 남발하다보니 ‘src’ 덕분에 코드 자체가 굉장히 지저분해지고 가독성이 많이 떨어져 보인다. dom으로 제어하는 부분이나, css 값을 적용하는 것에는 둘 사이에 큰 차이가 있다고 생각이 들지는 않았는데, 실제 instagram은 대부분의 image를 span의 background-image로 적용하고 있었다.</p>\n</li>\n</ul>\n<p>​</p>\n<p><strong>Javascript</strong></p>\n<ul>\n<li>주어진 assignment는 검색 창에 한 글자씩 입력할 때, 연관 검색어 같은 창이 생성되면서 일치하는 글자에 색깔이 변하게 하는 것이었다.</li>\n<li>먼저 input 박스 밑에 숨겨둘 <code class=\"language-text\">&lt;li&gt;</code> 태그를 만들었다. 그리고 <code class=\"language-text\">{ display: none }</code>으로 숨겨두었다. 그리고 dom을 사용해서 유사 배열 형태로 값을 받은 뒤, foreach와 같은 method를 사용하기 위해 Array.from으로 배열로 바꾸어주었다.</li>\n<li>Login Page에서 배운 input event를 사용해 한 글자마다의 즉각적인 변화가 가능하도록 했다.\nforeach를 통해 각각의 글자에 접근이 가능해졌고, 일치하는 문자열, 불일치하는 문자열로 나누었다.\ninnerHTML을 통해 ’<span class=\"\">‘를 직접입력해 색깔이 변하는 span을 적용해주었다.</li>\n</ul>\n<h2 id=\"feedback\"><a href=\"#feedback\" aria-label=\"feedback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Feedback</strong></h2>\n<ol>\n<li>기본 바탕 -> 쓸데 없는 것은 무조건 쓰지 말아야 하고, 최대한 간결하고 짧은 코드로 html/css를 완성해야 한다.</li>\n<li>필요 없는 div는 쓰지 말아야 한다.</li>\n<li>caniuse.com -> css나 event등의 browser별 지원 여부를 알려주는 페이지이다.</li>\n<li>flex는 나오지 얼마 되지 않았기 때문에 이것을 사용하지 않고도 할 줄 알아야 한다. flex는 보통 row로 정렬할 경우에 많이 사용한다. 세로 정렬은 block 기반 element일 경우 따로 지정하지 않아도 되기 때문에 필요없는 flex는 지양해야 한다.</li>\n<li>부모 기준으로 absolute를 쓰지 않아도 정렬이 가능한 경우, relative, absolute도 쓰지 않아도 된다.</li>\n<li>​form은 block / input, button은 none block 요소이다.</li>\n<li>다양한 tag를 알맞게 사용하는 것은 매우 중요하고, 효율적이고, 직관적인 html 작성이 가능하다.<br>\n그러나 잘못된 tag는 오히려 혼란을 야기할 수 있으므로 미리 알아보고 적절한 곳에 활용하는 것이 중요하다.</li>\n<li>section는 말 그래도 section을 나눌 때 사용한다. 따로 css가 필요할 경우에는 class를 부여해서 적용한다. body 안의 전체를 section으로 감싸는 것은 어색하다.</li>\n<li>image를 감싸고 있는 불필요한 div, span은 제거한다.</li>\n<li>image에 관하여, 우선 img 태그와 background-image의 기능적인 차이는 거의 없다.</li>\n<li>구글에 검색될 수 있는 여지가 있는 것은 img 태그이다.</li>\n<li>css로 다루기 쉬운 것은 div, span의 background-image이다. 장, 단점이 있는 것 같다.</li>\n<li>img 태그는 가로, 세로 둘 중에 하나만 값을 주어도 자동으로 비율에 맞추어 적용한다. 오히려 따로 값을 줄 경우 이미지가 깨질 여지가 있다.</li>\n<li>일정한 길이와 넓이가 있는 box에 overflow: auto를 적용할 경우, 해당 크기보다 커졌을 때 스크롤 바를 만들 수 있다.</li>\n</ol>","fields":{"slug":"/posts/westagram/","tagSlugs":["/tag/html/","/tag/css/","/tag/javascript/"]},"frontmatter":{"date":"2019.10.04","description":"What I learned From Instagram Clone Coding","tags":["HTML","css","javascript"],"title":"Westagram","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/westagram/"}}}