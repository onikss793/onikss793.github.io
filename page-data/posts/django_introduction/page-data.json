{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/django_introduction/","webpackCompilationHash":"998913bbfd15a73694e8","result":{"data":{"markdownRemark":{"id":"d87152b6-834c-5daa-bbb4-288ad0dd32f2","html":"<h4 id=\"glance\"><a href=\"#glance\" aria-label=\"glance permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Glance</strong></h4>\n<ul>\n<li>\n<p>MVC 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.</p>\n<ul>\n<li>Model은 애플리케이션의 정보를 나타낸다. 모델의 상태에 변화가 있을 때, 컨트롤러와 뷰에 이를 통보한다.<br>\n(models.py)</li>\n<li>View는 텍스트, 체크박스 등과 같은 사용자 인터페이스 요소를 나타낸다. 사용자가 볼 결과물을 생성하기 위해 모델로부터 정보를 얻어 온다. 2세대 개발 방식에는 이 영역까지 함께 개발했다. 장고도 사실 2세대 프레임워크이다.<br>\n(templates)</li>\n<li>Controler는 데이터와 비즈니스 로직(데이터베이스에 추가, 수정, 삭제를 하는 로직) 사이의 상호동작을 관리한다.<br>\n모델에 명령을 보냄으로써 모델의 상태를 변경할 수 있다. 컨트롤러가 관련된 뷰에 명령을 보냄으로써 모델의 표시 방법을 바꿀 수 있다. 하지만 이것 역시 2세대 개발 방식이다.<br>\n(views.py)</li>\n</ul>\n</li>\n<li>\n<p>Model\n파이썬의 모델은 데이터베이스 레이아웃을 파이썬 코드로 표현할 수 있는 Object-Relational-Mapper(ORM)를 사용한다. 이를 이용해, 모델을 풍부하게 표현할 수 있다.</p>\n<ul>\n<li>ORM이란 무엇일까? ORM은 데이터베이스와 객체 지향 프로그래밍 언어 간에 데이터를 호환 가능하게 변환하는 프로그래밍 기법이다. 쉽게 말하면 객체와의 관계 설정이라고 할 수 있다. ORM에서 말하는 객체는 OOP(객체 지향 프로그래밍)에서의 객체를 의미한다. 그렇다면 관계는 무엇을 의미할까? 기본적으로 관계형 데이터베이스를 의미한다. 관계형 데이터베이스란, 키와 값들의 간단한 관계를 테이블화 시킨 것이다. 이것은 관계형 모델에 기초하는 디지털 데이터베이스이다. 관계형 모델은 데이터를 컬럼과 로우를 이루는 하나 이상의 테이블로 정리하며, Primary Key가 각 로우를 식별한다. 로우는 튜플로 부른다. 테이블은 엔티티 타입(고객이나 제품과 같은)을 대표하며, 로우는 그 엔티티 종류의 인스턴스를, 컬럼은 그 인스턴스의 속성이 되는 값들을 대표한다.<br>\n테이블의 각 로우에는 저만의 고유 키가 있다. 한 테이블 안의 로우는 다른 테이블들의 로우로 연결이 가능한데, 이는 연결된 로우의 고유 키를 위한 컬럼을 추가함으로써 이루어진다. 이러한 컬럼을 Foreign Key라고 부른다.</li>\n</ul>\n</li>\n<li>View\n어플리케이션의 제어 흐름 및 처리 로직을 정의한다.</li>\n</ul>\n<h4 id=\"startproject\"><a href=\"#startproject\" aria-label=\"startproject permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Startproject</strong></h4>\n<ul>\n<li>directory/ : 디렉토리 바깥의 그저 프로젝트를 담는 공간</li>\n<li>manage.py : 장고 프로젝트와 상호작용하는 커맨드라인의 유틸리티</li>\n<li>mysite : Python 페키지들이 저장된다.</li>\n<li>mysite/<strong>init</strong>.py : 패키지처럼 다룰 수 있는 빈 파일</li>\n<li>mysite/settings.py : 장고 프로젝트의 환경 및 구성을 저장하는 공간</li>\n<li>mysite/urls.py : URL 선언 저장하는 곳. 일종의 사이트의 목차</li>\n<li>mysite/wsgit.py : 해당 프로젝트를 서비스하기 위한 WSGI 호환 웹 서버의 진입점<br>\n(WSGI - Wdb Server Gateway Interface): 파이썬 스크립트가 웹 서버와 통신하기 위한 인터페이스\n요청 -> 웹서버 -> WSGI Swerver(middleware) -> WSGI를 지원하는 웹어플리케이션(Django, flask 등)</li>\n</ul>","fields":{"slug":"/posts/django_introduction/","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2019.10.08","description":"Introduction to Django","tags":["Django"],"title":"Django Introduction","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/django_introduction/"}}}