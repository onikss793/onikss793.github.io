{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/westagram_react_01/","webpackCompilationHash":"e53e256fdaac26e8ee20","result":{"data":{"markdownRemark":{"id":"24479948-919a-5fd9-817d-3065062cc4c4","html":"<h2 id=\"basics-of-react\"><a href=\"#basics-of-react\" aria-label=\"basics of react permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Basics of React</strong></h2>\n<h4 id=\"react란\"><a href=\"#react%EB%9E%80\" aria-label=\"react란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>React란?</strong></h4>\n<p>React는 Javascript의 라이브러리이다. 2세대 개발 process에서 3세대로 넘어오는 과정에서 가장 큰 특징이라고 한다면, SPA(Single Page Application)일 것이다. Single-Page Application, SPA, 스파는 서버로부터 완전한 새로운 페이지를 불러오지 않고 현재의 페이지를 동적으로 다시 작성함으로써 사용자와 소통하는 웹 애플리케이션이나 웹사이트를 말한다. HTML, 자바스크립트, CSS 등 필요한 모든 코드는 하나의 페이지로 불러오거나,적절한 자원들을 동적으로 불러들여서 필요하면 문서에 추가하는데, 보통 사용자의 동작에 응답하게 되는 방식이다. 문서는 프로세스 중 어떠한 지점에서도 다시 불러들이지 않으며 다른 문서로 제어권을 넘기지 않으나, 위치 해시나 HTML5 히스토리 API를 사용하여 애플리케이션 안에서 개개의 논리 문서의 인식 및 탐색을 제공한다.<br>\nReact는 SPA를 활용하기에 굉장히 적합한 라이브러리로써, 상호작용이 많은 UI를 만들 때 생기는 어려움을 줄여준다. 그리고 애플리케이션의 각 상태에 대한 간단한 뷰만 설계하여 데이터가 변경됨에 따라 적절한 컴포넌트만 효율적으로 갱신하고 렌더링되도록 한다.</p>\n<h4 id=\"jsx\"><a href=\"#jsx\" aria-label=\"jsx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>JSX</strong></h4>\n<p>React에서는 Javascript와는 약간 다른 문법인 JSX라는 것을 사용한다. 쉽게 말하면 Javascript 안에 HTML 태그를 쓸 수 있게 되는 것을 의미하는데, 예를 들어</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>와 같은 형태를 가진다. 뿐만 아니라, 변수, 연산 등 기본적으로 Javascript에서 작동되는 거의 대부분을 HTML 태그 안에서 직접 활용이 가능하기 때문에 편리하고, 효율적인 코드 작성이 가능하다.</p>\n<h4 id=\"component\"><a href=\"#component\" aria-label=\"component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Component</strong></h4>\n<p>Component는 일종의 재사용이 가능한 UI 단위이다. 반복 가능한 UI를 Component 단위로 만들어, 쉽게 수정 및 재사용이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Welcome</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Hello<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">class</code> 형태로 생성이 가능하다. 생성된 Component는</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Welcome<span class=\"token operator\">></span></code></pre></div>\n<p>위와 같이, customized tag처럼 활용이 가능하다.</p>\n<h5 id=\"state-와-props\"><a href=\"#state-%EC%99%80-props\" aria-label=\"state 와 props permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>state 와 props</h5>\n<ul>\n<li>\n<p>state는 Component 내에 상태 값을 말한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\ncount<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위처럼 Component 안에서 만들어지며 setState를 사용하면 값을 변경할 수도 있다. state의 값이 변경되면 자동으로 다시 Rendering하게 된다.</p>\n</li>\n<li>props는 기본적으로 부모에게서 받아오는 값을 이야기한다(defaultProps를 사용하면 Component 내부에서도 설정할 수 있다). 이 값은 변동할 수 없으며, 부모에게서 받는 값을 그대로 사용하게 된다.</li>\n</ul>\n<h4 id=\"lifecycle\"><a href=\"#lifecycle\" aria-label=\"lifecycle permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Lifecycle</strong></h4>\n<p>render, componentDidMount, componentDidUpdate, componentWillUnmount 등의 함수는 React.Component class에서 제공하는 Method이다. 컴포넌트를 만들 때 class로 생성하면 위의 Method를 사용할 수 있고, 컴포넌트가 Lifecycle에 따라 각자의 메서드가 호출된다.\n<img src=\"https://yeri-kim.github.io/media/190417-lifecycle-1.png\" alt=\"lifecycle\"></p>\n<p>위와 같은 순서대로 작동하며, 효율적인 Rendering을 위해 각각의 순서를 인지하여 적절한 곳에 함수와 Method를 배치하는 것이 중요하다.</p>\n<p>componentDidMount() : render() 메서드 다음에 호출된다. this.setState()를 사용할 수 있어 다시 render를 해야 할 때 사용할 수 있다. 그로므로 fetch data를 할 때 사용 가능하며, event listener, setTimeOut 등을 이용하면 유용하게 사용할 수 있다.</p>","fields":{"slug":"/posts/westagram_react_01/","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019.10.15","description":"A First Step to React","tags":["React"],"title":"Westagram React-01","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/westagram_react_01/"}}}