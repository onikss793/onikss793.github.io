{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/til_191031/","webpackCompilationHash":"bade5310dfdc4ff5b635","result":{"data":{"markdownRemark":{"id":"3c9b4f52-a0c0-55d5-b03d-aed6a9f15d83","html":"<h2 id=\"인증\"><a href=\"#%EC%9D%B8%EC%A6%9D\" aria-label=\"인증 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>인증</strong></h2>\n<p>인증과 인가는 API 중에서 자주 쓰이는 API 중 하나이다. private API는 물론이고 public한 API의 경우에도 대부분 필요하다.</p>\n<p><strong>비밀번호 암호에는 단방향 해쉬 함수(one-way hash function)가 일반적으로 쓰인다.</strong><br>\n단방향 해시 함수는 원본 메시지를 변환하여 암호화된 메시지인 다이제스트(digest)를 생성한다. 원본 메시지를 알면 암호화된 메시지를 구하기는 쉽지만 암호화된 메시지로는 원본 메시지를 구할 수 없어서 단방향성(one-way) 이라고 한다.</p>\n<h4 id=\"rainbow-attack\"><a href=\"#rainbow-attack\" aria-label=\"rainbow attack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Rainbow Attack</strong></h4>\n<p><em>Rainbow table attack - 미리 해쉬값들을 계산해 놓은 테이블을 Rainbow table이라고 한다.</em><br>\n해시 함수는 원래 패스워드를 저장하기 위해서 설계된 것이 아니라 짧은 시간에 데이터를 검색하기 위해 설계된 것이다 (Remember Set?). 그렇기 때문에 해시 함수는 본래 처리 속도가 최대한 빠르도록 설계되었다. 이러한 속성 때문에 공격자는 매우 빠른 속도로 임의의 문자열의 다이제스트와 해킹할 대상의 다이제스트를 비교할 수 있다(MD5를 사용한 경우 일반적인 장비를 이용하여 1초당 56억 개의 다이제스트를 대입할 수 있다). 이런 방식으로 패스워드를 추측하면 패스워드가 충분히 길거나 복잡하지 않은 경우에는 그리 긴 시간이 걸리지 않는다 (대부분 사용자의 패스워드는 길거나 복잡하지 않을 뿐 아니라, 동일한 패스워드를 사용하는 경우도 많다).</p>\n<p><strong>Salting</strong><br>\n실제 비밀번호 이외에 추가적으로 랜덤 데이터를 더해서 해시값을 계산하는 방법.\n기본적으로 salt 값을 따로 저장해두어야 한다.\nsalting의 목적은 salt 값까지 미리 계산해둔 Rainbow Table을 만드는 것을 거의 불가능하게 만드는 역할이다. 기술적으로는 salt 값까지 모두 역추적은 가능하다.</p>\n<p><strong>Key Stretching</strong><br>\n단방향 해쉬값을 계산 한 후 그 해쉬값을 또 또 해쉬 하고, 또 이를 반복하는 것을 말한다.\n최근에는 일반적인 장비로 1초에 50억 개 이상의 다이제스트를 비교할 수 있지만, 키 스트레칭을 적용하여 동일한 장비에서 1초에 5번 정도만 비교할 수 있게 한다. GPU(Graphics Processing Unit)를 사용하더라도 수백에서 수천 번 정도만 비교할 수 있다. 50억 번과는 비교할 수도 없을 정도로 적은 횟수다. 앞으로 컴퓨터 성능이 더 향상되면 몇 번의 반복을 추가하여 보완할 수 있다.</p>\n<h4 id=\"json-web-token\"><a href=\"#json-web-token\" aria-label=\"json web token permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>JSON Web Token</strong></h4>\n<p>access token을 생성하는 방법은 여러가지가 있는데, 그 중 가장 널리 사용되는 기술중 하가 바로 JWT(JSON Web Tokens)이다.<br>\nJWT는 말 그대로 유저 정보를 담음 JSON 데이터를 암호화 해서 클라이언트와 서버간에 주고 받는 것이다.</p>\n<p><strong>JWT의 사용 이유</strong>: http 통신의 stateless라는 특성 때문에 한번 로그인 한 뒤 권한을 확인하는 것이 어렵다. 그래서 가장 단순한 방법으로 매 통신마다 로그인 정보를 담아 보낼 수 있다. 하지만 그렇게 할 경우, 브라우저에 민감한 로그인 정보를 항상 담고 있어야 하며 매 통신마다 로그인 절차를 반복해야 하기 때문에 매우 비효율적이다. 그래서 효율적인 통신을 위해 웹 토큰을 만들어 서로 주고 받는다.</p>\n<p><strong>간략한 절차:</strong> secret key를 이용해 암호화해둔 Signature를 복호화 -> 서버 내부에서 생성된 것이 맞는지 확인 -> decode -> user 정보 확인</p>\n<p><strong>주의 사항:</strong> 민감한 개인정보는 넣어두면 안 되고 단순히 데이터베이스에서 확인이 가능한 정보만 넣어야 한다(예를 들어 priamry key).</p>","fields":{"slug":"/posts/til_191031/","tagSlugs":["/tag/til/","/tag/authentification/"]},"frontmatter":{"date":"2019.10.31","description":"What I learned today","tags":["TIL","Authentification"],"title":"TIL 191031","socialImage":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/til_191031/"}}}