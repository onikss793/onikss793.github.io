<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog by Daniel Yoo]]></title><description><![CDATA[Welcome to my Blog]]></description><link>https://github.com/onikss793/onikss793.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 12 Oct 2019 07:05:55 GMT</lastBuildDate><item><title><![CDATA[Django Westagram Endpoint]]></title><description><![CDATA[My first step to backend endpoint]]></description><link>https://github.com/onikss793/onikss793.github.io/posts/django_westagram_endpoint/</link><guid isPermaLink="false">https://github.com/onikss793/onikss793.github.io/posts/django_westagram_endpoint/</guid><pubDate>Fri, 11 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;task&quot;&gt;&lt;a href=&quot;#task&quot; aria-label=&quot;task permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Task&lt;/strong&gt;&lt;/h4&gt;
&lt;h4 id=&quot;model&quot;&gt;&lt;a href=&quot;#model&quot; aria-label=&quot;model permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Model&lt;/strong&gt;&lt;/h4&gt;
&lt;h4 id=&quot;view&quot;&gt;&lt;a href=&quot;#view&quot; aria-label=&quot;view permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/h4&gt;</content:encoded></item><item><title><![CDATA[Django Introduction]]></title><description><![CDATA[Introduction to Django]]></description><link>https://github.com/onikss793/onikss793.github.io/posts/django_introduction/</link><guid isPermaLink="false">https://github.com/onikss793/onikss793.github.io/posts/django_introduction/</guid><pubDate>Mon, 07 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;glance&quot;&gt;&lt;a href=&quot;#glance&quot; aria-label=&quot;glance permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Glance&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MVC 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model은 애플리케이션의 정보를 나타낸다. 모델의 상태에 변화가 있을 때, 컨트롤러와 뷰에 이를 통보한다.&lt;br&gt;
(models.py)&lt;/li&gt;
&lt;li&gt;View는 텍스트, 체크박스 등과 같은 사용자 인터페이스 요소를 나타낸다. 사용자가 볼 결과물을 생성하기 위해 모델로부터 정보를 얻어 온다. 2세대 개발 방식에는 이 영역까지 함께 개발했다. 장고도 사실 2세대 프레임워크이다.&lt;br&gt;
(templates)&lt;/li&gt;
&lt;li&gt;Controler는 데이터와 비즈니스 로직(데이터베이스에 추가, 수정, 삭제를 하는 로직) 사이의 상호동작을 관리한다.&lt;br&gt;
모델에 명령을 보냄으로써 모델의 상태를 변경할 수 있다. 컨트롤러가 관련된 뷰에 명령을 보냄으로써 모델의 표시 방법을 바꿀 수 있다. 하지만 이것 역시 2세대 개발 방식이다.&lt;br&gt;
(views.py)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Model
파이썬의 모델은 데이터베이스 레이아웃을 파이썬 코드로 표현할 수 있는 Object-Relational-Mapper(ORM)를 사용한다. 이를 이용해, 모델을 풍부하게 표현할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ORM이란 무엇일까? ORM은 데이터베이스와 객체 지향 프로그래밍 언어 간에 데이터를 호환 가능하게 변환하는 프로그래밍 기법이다. 쉽게 말하면 객체와의 관계 설정이라고 할 수 있다. ORM에서 말하는 객체는 OOP(객체 지향 프로그래밍)에서의 객체를 의미한다. 그렇다면 관계는 무엇을 의미할까? 기본적으로 관계형 데이터베이스를 의미한다. 관계형 데이터베이스란, 키와 값들의 간단한 관계를 테이블화 시킨 것이다. 이것은 관계형 모델에 기초하는 디지털 데이터베이스이다. 관계형 모델은 데이터를 컬럼과 로우를 이루는 하나 이상의 테이블로 정리하며, Primary Key가 각 로우를 식별한다. 로우는 튜플로 부른다. 테이블은 엔티티 타입(고객이나 제품과 같은)을 대표하며, 로우는 그 엔티티 종류의 인스턴스를, 컬럼은 그 인스턴스의 속성이 되는 값들을 대표한다.&lt;br&gt;
테이블의 각 로우에는 저만의 고유 키가 있다. 한 테이블 안의 로우는 다른 테이블들의 로우로 연결이 가능한데, 이는 연결된 로우의 고유 키를 위한 컬럼을 추가함으로써 이루어진다. 이러한 컬럼을 Foreign Key라고 부른다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;View
어플리케이션의 제어 흐름 및 처리 로직을 정의한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;startproject&quot;&gt;&lt;a href=&quot;#startproject&quot; aria-label=&quot;startproject permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Startproject&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;directory/ : 디렉토리 바깥의 그저 프로젝트를 담는 공간&lt;/li&gt;
&lt;li&gt;manage.py : 장고 프로젝트와 상호작용하는 커맨드라인의 유틸리티&lt;/li&gt;
&lt;li&gt;mysite : Python 페키지들이 저장된다.&lt;/li&gt;
&lt;li&gt;mysite/&lt;strong&gt;init&lt;/strong&gt;.py : 패키지처럼 다룰 수 있는 빈 파일&lt;/li&gt;
&lt;li&gt;mysite/settings.py : 장고 프로젝트의 환경 및 구성을 저장하는 공간&lt;/li&gt;
&lt;li&gt;mysite/urls.py : URL 선언 저장하는 곳. 일종의 사이트의 목차&lt;/li&gt;
&lt;li&gt;mysite/wsgit.py : 해당 프로젝트를 서비스하기 위한 WSGI 호환 웹 서버의 진입점&lt;br&gt;
(WSGI - Wdb Server Gateway Interface): 파이썬 스크립트가 웹 서버와 통신하기 위한 인터페이스
요청 -&gt; 웹서버 -&gt; WSGI Swerver(middleware) -&gt; WSGI를 지원하는 웹어플리케이션(Django, flask 등)&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Python]]></title><description><![CDATA[Basics of Python]]></description><link>https://github.com/onikss793/onikss793.github.io/posts/python/</link><guid isPermaLink="false">https://github.com/onikss793/onikss793.github.io/posts/python/</guid><pubDate>Sun, 06 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;hello-world&quot;&gt;&lt;a href=&quot;#hello-world&quot; aria-label=&quot;hello world permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Hello World&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;파이썬에서 화면에 출력을 하고 싶을 때는 &lt;code class=&quot;language-text&quot;&gt;print()&lt;/code&gt;명령어를 사용하면 된다.&lt;br&gt;
python은 indentation이 매우 중요하다. 그것을 통해 종속 관계를 설정하기 때문이다.&lt;br&gt;
주로 &lt;code class=&quot;language-text&quot;&gt;[space bar] X 4&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;data-types&quot;&gt;&lt;a href=&quot;#data-types&quot; aria-label=&quot;data types permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Data Types&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;파이썬에는 5개의 data types가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Integer 정수&lt;/li&gt;
&lt;li&gt;Float 소수&lt;/li&gt;
&lt;li&gt;Complex Numbers 실수와 허수를 포함하는 복소수&lt;/li&gt;
&lt;li&gt;String 문자열&lt;/li&gt;
&lt;li&gt;Boolean True / False&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;math-expressions&quot;&gt;&lt;a href=&quot;#math-expressions&quot; aria-label=&quot;math expressions permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Math Expressions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Javascript와 유사하지만 다른 점이 있다면, 몫을 구하는 &lt;code class=&quot;language-text&quot;&gt;//&lt;/code&gt;가 있다는 것이다. 예를 들어,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;
num2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;
num3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;//&lt;/span&gt; num2
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;더불어 Integer끼리의 나눗셈의 결과값이 항상 Float의 형태가 된다. 예를 들어,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;num1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;
num2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;
num3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; num1 &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; num2
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;num3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;literal-string-interpolation&quot;&gt;&lt;a href=&quot;#literal-string-interpolation&quot; aria-label=&quot;literal string interpolation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;literal string interpolation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;매우 python다운? String Concatenation 방법이 있다. 대략 3가지 정도가 있는데, 가장 편리한 방법 중 하나는 아래의 예시와 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;python&quot;&lt;/span&gt;
pring&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;Hello, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&quot;Hello&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; python&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;if-statement&quot;&gt;&lt;a href=&quot;#if-statement&quot; aria-label=&quot;if statement permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;If Statement&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;if는 javascript와 매우 유사한 방식으로 작동하는데, 몇 가지 문법이 조금 다르다. 그 차이는 직관적으로 python이 조금 더 쉽고, 편리한 방법을 지향한다는 점에 기인하는 듯 하다.&lt;/p&gt;
&lt;p&gt;기본적인 문법은 다음과 같다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;python&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;Hello, &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token string&quot;&gt;&quot;Hello, python&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;또한, python은 else if와 else의 기능도 지원한다.(else if 는 elif로 줄여 사용한다)&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;python&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;Hello, Javascript&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;elif&lt;/span&gt; name &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;java&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;Hello, Java&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;Hello, python&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;logical-operators&quot;&gt;&lt;a href=&quot;#logical-operators&quot; aria-label=&quot;logical operators permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Logical Operators&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;python은 javascript보다 직관적인 논리 연산자를 제공하는 듯 하다. 말 그대로 &lt;code class=&quot;language-text&quot;&gt;and&lt;/code&gt;는 &lt;code class=&quot;language-text&quot;&gt;그리고&lt;/code&gt;의 의미를, &lt;code class=&quot;language-text&quot;&gt;or&lt;/code&gt;은 &lt;code class=&quot;language-text&quot;&gt;또는&lt;/code&gt;의 의미를 가지고 있다. 아울러 &lt;code class=&quot;language-text&quot;&gt;&amp;gt;, &amp;lt;, =&amp;gt;, =&amp;lt;, ==, !=&lt;/code&gt;를 통한 비교 연산도 가능하다.&lt;/p&gt;
&lt;h2 id=&quot;data-structure&quot;&gt;&lt;a href=&quot;#data-structure&quot; aria-label=&quot;data structure permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Data Structure&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;list: 서로 다른 type의 값들을 &lt;code class=&quot;language-text&quot;&gt;[]&lt;/code&gt;안에 저장할 수 있으며, 순서가 존재한다. 그렇기에 index를 통해 list의 요소들을 조회할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기본적인 추가, 제거는 &lt;code class=&quot;language-text&quot;&gt;append() / del / remove()&lt;/code&gt;로 구현할 수 있다.&lt;/li&gt;
&lt;li&gt;slicing은 &lt;code class=&quot;language-text&quot;&gt;list[start:end]&lt;/code&gt;로 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tuple: tuple은 list와 유사하게 요소들을 한데 모아 저장할 때 쓰이지만, 약간의 차이를 가지고 있다. tuple은 한번 선언하게된 이후에는 수정이 불가능하다. 그럼에도 tuple을 쓰는 이유는 list보다 차지하는 메모리 용량이 적기 때문에, 수정이 필요없고 간단한 형태의 데이터는 tuple로 사용하는 것이 효과적이다.&lt;br&gt;
tuple은 list와 같이 쓰이는 경우가 많다. 예를 들어,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;my_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set: List는 순차적으로 여러가지 요소들이 들어갈 수 있다. 하지만 set은 순차적으로 저장되지 않으며 중복되는 요소들이 없다. 예를 들어,&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;my_list &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;my_list&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;기본적인 추가, 제거는 add()와 remove()로 구현할 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set은 어떠한 요소가 있는지 찾거나 조회하는데 유용하다.
in 키워드를 사용해 포함 여부를 확인할 수 있다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;&amp;amp;&lt;/code&gt; 와 &lt;code class=&quot;language-text&quot;&gt;|&lt;/code&gt; 를 이용해 교집합과 합집합을 구할 수도 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;set1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
set2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1 &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;intersection&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Dictionary: key와 value의 값으로 이루어져 있다. Javascript의 객체와 매우 유사하다. 하지만 dot notation으로는 접근할 수 없고, 오직 [key]를 이용해 접근할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;loops&quot;&gt;&lt;a href=&quot;#loops&quot; aria-label=&quot;loops permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Loops&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Javascript와 대부분 유사한 방식으로 작동한다. 그러나 변수를 통한 접근이 아닌
&lt;code class=&quot;language-text&quot;&gt;py for element in list: do_something_with_element&lt;/code&gt;
element에 직접적인 접근이 가능하다.
list, tuple, set 등 다른 data structure에도 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;break: 반복문이 도중에 break를 만나게 되면, 반복문을 종료하고 빠져나온다.&lt;/li&gt;
&lt;li&gt;continue: 반복문이 도중에 continue를 만나게 되면, 다음 반복으로 넘어가게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;while&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;else: Javascript의 while과 거의 유사하다. 그러나 Python의 while문은 else문을 추가할 수 있다. while의 조건이 성립되지 않을 때 실행된다는 것인데, 쉽게 말하면 while이 종료될 때 실행된다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;keyorded-variable-length-of-arguments&quot;&gt;&lt;a href=&quot;#keyorded-variable-length-of-arguments&quot; aria-label=&quot;keyorded variable length of arguments permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Keyorded variable length of arguments&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;그 수가 정해지지 않고, 유동적으로 변화할 수 있는 arguments를 받기 위해 “kwargs”라는 기능이 있다. 대부분 ”**kwargs”라고 parameter 이름을 정한다.&lt;/li&gt;
&lt;li&gt;이와 비슷하지만, keyword를 사용하지 않고, 순서대로 값을 전달하며, 그저 다양한 수의 arguments를 받기 위한 “args”라는 기능이 있다. 주로 ”*args”라고 parameter 이름을 정한다. 이 arguments는 tuple로 변환되어 함수로 전달된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nested-functiondecorator&quot;&gt;&lt;a href=&quot;#nested-functiondecorator&quot; aria-label=&quot;nested functiondecorator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Nested Function(Decorator)&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;closure를 이용해 부모 함수에서 선언된 변수나 정보를 외부로부터 격리한 채, 중첩 함수에서 그 값을 참조해 사용하기 위해 Nested Function을 사용한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;중첩 함수의 유지, 보수, 재사용의 효율을 최대화하기 위해 Decorator를 사용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;py&quot;&gt;&lt;pre class=&quot;language-py&quot;&gt;&lt;code class=&quot;language-py&quot;&gt;&lt;span class=&quot;token decorator annotation punctuation&quot;&gt;@decorator&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello&apos;&lt;/span&gt;
function&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 function을 실행했을 때, “@decorator”를 자동을 먼저 실행하게 되고,
“function”이라는 함수를 인자로 받아 사용할 수 있다.
가장 쉽게 이해할 수 있는 방법은 실행 순서를 생각하며 코드를 짜는 것 같다. 인자에 집중하게 되는 순간 헷갈릴 여지가 생긴다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Class&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Python의 클래스는 Javascript와 다르게 this대신 self라는 키워드를 사용한다.
또한 클래스 안에서 정의할 수 있는 special method가 있다. 앞, 뒤에 더블 언더스코어(**)를 붙여 사용하는데, 대표적으로 **init__이라는 magic method가 있다. 인스턴스가 선언됨과 동시에 호출된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;module--packages&quot;&gt;&lt;a href=&quot;#module--packages&quot; aria-label=&quot;module  packages permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Module &amp;#x26; Packages&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;다른 파일에서 재사용이 가능하고, 여러 파일로 나누어 정리하고 관리할 때 사용하는 것이 module이다. import, import as로 모듈을 호출할 수 있다. 특정 함수나 변수를 호출하기 위해서는 from import 키워드를 사용하면 된다. Package는 Module의 모음이라고 생각하면 되며, dot notation과 위의 import와 같은 키워드로 활용하면 된다. Package 안에 &lt;strong&gt;init&lt;/strong&gt;.py이라는 라는 파일이 있으면 해당 Package가 import될 때 자동으로 해당 파일의 코드들이 실행되기 때문에 package의 초기 설정이 가능하다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sys Module
Sys 모듈은 파이썬 런타임 환경의 다양한 부분을 조작하기 위해 사용되는 함수와 변수를 제공한다.&lt;br&gt;
먼저 런타임 환경이란 무엇일까. 런타임 환경을 알기 위해서는 런타임을 알아야 할 것 같다. 런타임은 프로그램이 실행되고 있는 그 순간을 말한다. 예를 들어, 컴퓨터에서 어떤 프로그램이 가동되면 그 순간이 그 프로그램의 런타임이다. 말그대로, “runtime 작동하는 순간”을 말한다. 여기서의 순간은 단순 시간적인 것만 이야기하는 것이 아닌, 환경 전체를 의미한다고 보는 것이 명확하다. Javascript =&gt; Browser, Node.js 그렇기에 런타임 환경이라는 말을 쓴다고 생각한다.&lt;/p&gt;
&lt;p&gt;이 시점에서 맨 첫 문장을 다시보자.
Sys 모듈은 “파이썬을 구동하는 동안 특정 부분을 조작하기 위해 다양한 함수와 변수를
제공한다는 의미”이다.
그렇다면 파이썬은 Sys 모듈을 어떻게 찾아서 import하는 것일까.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sys 모듈 빌트인 모듈이다. 그러므로 파이썬을 설치할 때 이미 포함되어 있어 쉽게 찾을 수 있다.&lt;br&gt;
import Sys를 하면 우선 현재 작업 디렉토리, 그러니까 프로그램이 실행된 곳의 디렉토리 안을 맨 처음 검색한다.&lt;br&gt;
두번째로 pythonpath 환경 변수에 등록된 위치를 검색한다. 사용자가 만든 디렉토리를 모듈 검색 경로에 등록하려면 pythonpath 환경변수에 등록하면 된다.&lt;br&gt;
세번째로 표준라이브러리 디렉토리를 검색한다. 파이썬의 모듈검색경로목록은 sys.path에 리스트 형식으로 관리되고 있다. Sys는 표준라이브러리 디렉토리에 있다.&lt;/li&gt;
&lt;li&gt;sys.modules는 현재 로딩되어 있는 모듈들을 dictionary 형태로 나타낸다.
수정, 삭제와 같은 조작이 가능하다.
sys.path는 파이썬이 모듈을 찾을 때 참조하는 경로를 나타낸다.
여기에 없다면 파이썬이 찾을 수 없을 것이다.
경로를 추가하는 작업도 가능하다.&lt;/li&gt;
&lt;li&gt;Absolute path는 특정한 파일, 폴더로 가는 절대적인 경로를 말한다.
그렇기 때문에, 현재 속해 있는 위치가 어디든 상관없이 똑같은 명령어로 경로에 접근할 수 있다는 장점이 있다.
반면, 경로가 복잡해질 경우에 경로가 매우 길어질 수 있어 가독성이 떨어질 수 있다는 단점이 있다.
Relative path는 툭정한 파일, 폴더로 가는 상대적인 위치를 말한다.
경로의 기준이 현재 속해 있는 위치가 되기 때문에, 코드의 길이가 길어질 경우가 상대적으로 적다.
그러나 위치에 변동이 생길 때마다 코드를 수정해야한다는 단점이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;exception&quot;&gt;&lt;a href=&quot;#exception&quot; aria-label=&quot;exception permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Exception&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;일반적으로 파이썬에서 exception이 발생하면 다음 코드들이 실행되지 않고 프로그램이 종료된다. 하지만 exception을 지정해준다면 해당 프로세스가 종료되지 않고, 지정해준 로직을 실행하도록 할 수 있다.&lt;br&gt;
(finally는 exception의 발생 여부와 상관없이 무조건 실행된다.)&lt;/p&gt;
&lt;p&gt;에러는 SyntaxError, ZeroDivisionError, NameError, TypeError 등이 있다. 이런 특정 에러를 catch해서 사용할 수 있고, as 키워드를 사용해서 exception의 객체를 받아서 정보를 더 얻을 수 있다.&lt;/p&gt;
&lt;p&gt;try 문에도 else가 있는데, else는 exception이 발생하지 않았을 때 실행된다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Enemy Rain]]></title><description><![CDATA[What I Learnded From Making Vanila Javascript Game]]></description><link>https://github.com/onikss793/onikss793.github.io/posts/enemy_rain</link><guid isPermaLink="false">https://github.com/onikss793/onikss793.github.io/posts/enemy_rain</guid><pubDate>Thu, 03 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;개요&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;개요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;개요&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;배경화면을 띄운다.&lt;/li&gt;
&lt;li&gt;주인공이 배경 맨 아래에 위치하며 오른쪽, 왼쪽으로 이동할 수 있다.&lt;/li&gt;
&lt;li&gt;주인공이 왼쪽, 오른쪽으로 이동할 때마다 각각에 맞는 이미지로 변하며, 배경의 끝에 도달하면 더 이상 못 움직인다.&lt;/li&gt;
&lt;li&gt;귀신이 위에서 무작위로 내려온다.&lt;/li&gt;
&lt;li&gt;주인공이 귀신을 잡으면 귀신이 죽고 약 2초 뒤에 사라진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;css&quot;&gt;&lt;a href=&quot;#css&quot; aria-label=&quot;css permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;css&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;선수 지식: image-sprite - 여러 개의 이미지를 한 개의 파일에 모두 담아 관리하는 이미지를 말한다. 이렇게 하면 서버에서 각각의 이미지를 다운 받으면서 생기는 로딩 시간을 단축할 수 있고, 한 개의 파일만 관리하면 되기 때문에 유용하다.&lt;br&gt;
image-sprite를 사용하려면 background-postition을 사용해야 하는데 x축과 y축, width와 height를 이용해 하나의 이미지 파일에서 원하는 만큼만 보여지게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;javascript&quot;&gt;&lt;a href=&quot;#javascript&quot; aria-label=&quot;javascript permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;가장 먼저 애를 먹었던 부분은 주인공과 귀신 모두 class를 사용해 생성해야 한다는 것이었다. 얼추 흉내는 냈지만 많은 부분을 그냥 function으로 실행했기 때문에 추후에 리팩토링하며 class로 변환하는 것을 연습해보아야겠다.&lt;/p&gt;
&lt;p&gt;먼저 주인공 class에는 &lt;code class=&quot;language-text&quot;&gt;this.hero&lt;/code&gt;라는 div를 만들었다. 그리고 &lt;code class=&quot;language-text&quot;&gt;createHero, heroLeft, heroRight&lt;/code&gt;라는 method를 만들었다.&lt;/p&gt;
&lt;p&gt;createHero(x)를 이용해 x축 값을 받아 배경 상에서 주인공이 어디에 위치할지를 정해주었고, 기본값으로 정면을 바라보고 있는 이미지를 주었다. &lt;code class=&quot;language-text&quot;&gt;this.hero.style.left = `${x}px`&lt;/code&gt;를 사용했는데, javascript내에서 style을 적용할 때, 저런 식으로 px을 따로 입력하는 것을 잊지 말자.
heroLeft()를 이용해 왼쪽을 바라보고 있는 이미지를, heroRight()를 이용해 오른쪽을 바라보고 있는 이미지를 정해주었다.&lt;/p&gt;
&lt;p&gt;귀신 class에는 &lt;code class=&quot;language-text&quot;&gt;createEnemy(x, y), killEnemy(), removeEnemy()&lt;/code&gt;를 사용했는데, 주인공 class와 유사한 기능을 가지고 있으며, 추가 사항으로는 귀신이 떨어지기 위한 y값과 죽었을 때의 이미지를 위한 killEnemy(), 사라질 때를 위한 removeEnemy()가 있다. 사라지는 것을 단순하게 display:none으로 구현했는데 이외에 분명 더 좋은 방법이 있을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;게임을 실행하는 것을 크게 3 가지로 구분해보면,&lt;br&gt;
&lt;strong&gt;1. 첫째로 주인공을 만든 뒤 좌우로 이동시키는 것&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;2. 둘째로 귀신을 만든 뒤 아래로 내려오게 만드는 것&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3. 셋째로 주인공과 귀신이 만났을 때 효과를 주는 것&lt;/strong&gt;&lt;br&gt;
이렇게 나눌 수 있을 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;우선 Hero라는 인스턴스를 한개 생성한다. 인스턴스의 갯수가 곧 개체 수의 갯수가 되는데, 주인공은 한 명이므로 한개만 생성한다.&lt;br&gt;
기존의 Hero class로 만들어 두었던 주인공 생성 method를 사용해 주인공을 화면에 띄운다. 이때의 x값은 default인 배경의 한 가운데이다.&lt;br&gt;
keyUp, keyDown event를 사용해 키보드 좌, 우 키를 눌렀을 때 주인공의 이미지를 좌, 우에 맞게 바꾸어준다(background-position-x를 사용한다). 이때 주의해야할 것은 게임이 진행되는 과정에서 애니매이션처럼 보이게 만들어주는 setInterval과의 관계이다. 키보드를 눌렀을 때 바라보는 이미지가 주어진 초에 맞추어 소위 reset되기 때문에 키가 눌려졌는지 여부를 알 수 있는 변수를 만들어 마치 on/off 같은 기능을 만드는 것이 중요하다.&lt;br&gt;
주인공이 한번의 key event에 움직일 px을 정해준 뒤, 각각의 key가 on/off일 때 맞추어 움직이는 함수를 생성한다.&lt;/p&gt;
&lt;p&gt;귀신을 생성하기에 앞서서 귀신이 생성될 random한 x축 값을 만드는 것이 우선이었다.&lt;br&gt;
최솟값, 최댓값의 범위 안에서 random한 상수를 생성하는 공식은 다음과 같다. &lt;code class=&quot;language-text&quot;&gt;Math.random() * (max - min) + min&lt;/code&gt; 만약 정수가 필요하다면 floor를 사용하면 된다.&lt;br&gt;
귀신을 생성할 때 의문이었던 것은, 귀신의 인스턴스가 많아질 경우, 어떻게 관리해야하나 하는 문제였다. 이를 해결하기 위해 배열을 만든 뒤 인스턴스 각각을 객체로 설정해 집어넣었다.&lt;br&gt;
귀신을 만들 때는 귀신의 y점이 배경의 높이보다 커질 경우, y는 0, x는 다시 randomise하게 설정했다.&lt;br&gt;
귀신이 떨어질 때 일괄적으로 떨어지는 속도가 재미가 없어보여, 곱하기를 통해 각각 속도가 다르도록 설정했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fallEnemy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; fallingSpeed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; adding &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; enemyList&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; enemy &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; enemyList&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    enemy&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; fallingSpeed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    fallingSpeed &lt;span class=&quot;token operator&quot;&gt;*=&lt;/span&gt; adding&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;귀신과 부딫혔을 때를 계산하는 것이 제일 번거로웠는데, x축과 길이, y축과 높이를 계산하여 부딫혔을 때를 알 수 있다.&lt;/p&gt;
&lt;p&gt;가장 찝찝한 부분은 귀신과 주인공이 부딫히고 나서, 귀신이 죽은 이미지로 바뀐 후, 사라지는 과정이다. setInterval로 실행하는 전체 실행 함수인 init에 같이 넣게되면 이미지가 바뀜과 동시에 사라지는 문제가 생긴다. 그렇다고 따로 setInterval을 정하게 되면 순전히 타이밍에 따라서 2초를 꽉 채운 후, 사라지는 경우가 있고, 2초를 채우지 못하고 사라질 때도 있다. 분명 다른 방법이 있을 것 같다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git commands]]></title><description><![CDATA[Basic Commands of terminal for git]]></description><link>https://github.com/onikss793/onikss793.github.io/posts/git_commands/</link><guid isPermaLink="false">https://github.com/onikss793/onikss793.github.io/posts/git_commands/</guid><pubDate>Thu, 03 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;--githubio-블로그-만들며서-썻던-git-commands-정리--&quot;&gt;&lt;a href=&quot;#--githubio-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EB%A9%B0%EC%84%9C-%EC%8D%BB%EB%8D%98-git-commands-%EC%A0%95%EB%A6%AC--&quot; aria-label=&quot;  githubio 블로그 만들며서 썻던 git commands 정리   permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;- github.io 블로그 만들며서 썻던 git commands 정리 -&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;기본적인 터미널 단축키&lt;/strong&gt;&lt;br&gt;
cd: change directory 디렉토리로 이동할 수 있다.&lt;br&gt;
ls: listing directory 디렉토리에 있는 콘텐츠를 확인할 수 있다.&lt;br&gt;
open: file을 열 수 있다.&lt;br&gt;
mv: move file을 이동시킬 수 있다&lt;br&gt;
mkdir: make directory 새로운 디렉토리를 만들 수 있다.&lt;br&gt;
rmdir: 디렉토리를 제거할 수 있다 .&lt;br&gt;
rm -R: 현재 경로 안에 있는 디렉토리를 제거한다.&lt;br&gt;
sudo: 관리자로서 접근하여 명령할 수 있다. 매우 신중히 사용할 것.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;우선 Gatsby를 사용할 수 있도록 전역에 설치&lt;/strong&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;npm install -g gatsby-cli&lt;/code&gt;&lt;br&gt;
npm은 node.js package manager의 약자로 자바스크립트 언어를 위한 패키지 관리자이다. node를 다운받으면 같이 받을 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gatsby의 theme 중 원하는 것의 source code를 가져온다.&lt;/strong&gt;
&lt;code class=&quot;language-text&quot;&gt;gatsby new blog https://github.com/alxshelepenok/gatsby-starter-lumen&lt;/code&gt;&lt;br&gt;
추가적으로 facebook이 만든 yarn을 설치했다.&lt;br&gt;
yarn은 npm과 같은 자바스크립트 언어를 위한 패키지 관리자이다. npm의 취약한 저장소, 보안의 대안으로 나타났으며 npm보다 속도가 빠르다고 한다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;블로그 설치 완료 후 localhost에서 확인&lt;/strong&gt;&lt;br&gt;
yarn develop 혹은 npm run develop으로 localhost:8000에서 확인 가능하다.&lt;br&gt;
추가적으로 서버를 멈추고 싶다면 terminal 창을 끄거나 ctrl-c를 누르면 서버가 닫힌다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;github에 repository를 만든다.&lt;/strong&gt;&lt;br&gt;
github에서 repository를 만든다. 여기서 주의할 점은 github 사용자 아이디와 같은 이름으로 naming해야 한다는 것이다. 그리고 사용자 이름 뒤에 github.io를 붙인다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;username.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Source Code와 Repository를 연결한다. 설치한 blog파일에서 git을 시작한다.&lt;/strong&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;git init&lt;/code&gt; Repository의 주소와 연결한다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;git remote add origin repository-url&lt;/code&gt;&lt;br&gt;
git add와 git commit을 통해 내용을 추가, 수정한 뒤 repository에 저장 가능하다.&lt;br&gt;
git add는 commit하기 전 추가할 사항들을 정하는 명령어로 add -p로 세부적인 사항을 하나하나 검토할 수도 있고, add . 으로 일괄적으로 추가할 수도 있다.&lt;br&gt;
git commit은 현재 branch로 push하기 전, 그러니까 저장소로 업로드하기 전에 메시지와 함께 작업 내역을 마지막으로 정리할 수 있는 명령어이다. commit -m으로 메시지를 남길 수 있고, commit -v를 이용하면 세부적인 변경사항을 확인할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;push와 deploy&lt;/strong&gt;&lt;br&gt;
branch는 보통 배포용인 master 외에 추가적으로 만들어 관리한다. 블로그이기 때문에 추가적인 branch 한 개를 더 만들어 내용을 업로드한다. 그러나 그 상태로는 아무리 push를 해도 배포에는 반영이 되지 않기 때문에, 자동으로 수행할 수 있는 &lt;code class=&quot;language-text&quot;&gt;&amp;quot;deploy&amp;quot;: &amp;quot;yarn run clean &amp;amp;&amp;amp; gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&lt;/code&gt; 명령어를 실행한다.&lt;br&gt;
이후 배포할 때는 &lt;code class=&quot;language-text&quot;&gt;yarn deploy&lt;/code&gt;를 명령어를 사용하면, 알아서 build, master에 push 그리고 deploy도 실행된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h5 id=&quot;git-commands&quot;&gt;&lt;a href=&quot;#git-commands&quot; aria-label=&quot;git commands permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Git Commands&lt;/strong&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;git init: local에 새로운 repository를 만든다.&lt;/li&gt;
&lt;li&gt;git clone: local에 repository를 복사한다.&lt;/li&gt;
&lt;li&gt;git add: 상태에 1개 혹은 그 이상의 파일을 추가한다.&lt;/li&gt;
&lt;li&gt;git commit: 상태를 commit한다. repository에 접근하기 바로 전 단계&lt;/li&gt;
&lt;li&gt;git push { branch }: branch에 commit한 사항을 업로드 한다.&lt;/li&gt;
&lt;li&gt;git status: 현재의 상태&lt;/li&gt;
&lt;li&gt;git remote add origin: local에 있는 repository를 서버에 연결할 때 사용한다.&lt;/li&gt;
&lt;li&gt;git checkout: 해당 repository의 branch 리스트를 보여준다.&lt;/li&gt;
&lt;li&gt;git checkout { branchname }: 해당 branch로 이동한다.&lt;/li&gt;
&lt;li&gt;git log: commit한 기록들을 보여준다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Westagram]]></title><description><![CDATA[What I learned From Instagram Clone Coding]]></description><link>https://github.com/onikss793/onikss793.github.io/posts/westagram/</link><guid isPermaLink="false">https://github.com/onikss793/onikss793.github.io/posts/westagram/</guid><pubDate>Thu, 03 Oct 2019 15:00:00 GMT</pubDate><content:encoded>&lt;h4 id=&quot;1-login-page&quot;&gt;&lt;a href=&quot;#1-login-page&quot; aria-label=&quot;1 login page permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;1. LogIn Page&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;기본적인 Layout을 짜기 전에 margin과 padding 등을 일일이 계산하지 않도록 &lt;code class=&quot;language-text&quot;&gt;* { box-sizing: border-box }&lt;/code&gt; 를 사용했다.&lt;/li&gt;
&lt;li&gt;로그인을 전체적으로 감싸고 있는 div를 만든 뒤, Logo - Id&amp;#x26;Password Form - footer(비밀번호 찾기)로 구성했다. 그러나 다시 생각해보니 footer는 document의 맨 아래 위치한 section이기 때문에 적절치 않은 태그인 것 같다. div로 바꾸어도 무방할 듯하다.&lt;/li&gt;
&lt;li&gt;전체적인 정렬을 위해서 &lt;code class=&quot;language-text&quot;&gt;{ display: flex }&lt;/code&gt; 와 함께 justify-content, align-items등을 사용했는데, flex는 정말이지 유용하다. 아무 생각 없이 했던 것 중 하나가 &lt;code class=&quot;language-text&quot;&gt;{ display: absolute }&lt;/code&gt;를 남발한 것인데, 세부적인 div가 아닌 이상 전체적인 layout에 사용하는 것은 좋지 않은 것 같다. 페이지의 크기 변화에 망가지기 일쑤였고, width와 height의 추가, 수정을 할 때마다 확인해주어야 했기 때문이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;javascript&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주어진 assignment는 ID와 Password에 2글자 이상 쳤을 때만 Button이 활성화되고 Submit이 이루어지게 하는 것이었다. 맨 처음에는 onchange event인 줄 알고, 계속 작업을 했는데 도무지 작동을 하지 않아 원인을 알 수가 없었다. 그러다 알게 된 사실은 React에서는 onchange이지만 javascript에서는 그냥 change라는 것이었다.&lt;br&gt;
하지만 change로 완성한 뒤에도 문제가 생겼다. 해당 input 박스에서 focus out 되어야만 함수가 작동한다는 것이었다. 찾아보니 focus에 관련한 자세한 event가 많았으며, input박스에서 일어나는 변화에 즉각 반응하는 event를 생성하려면 change가 아닌 input event가 필요하다는 것을 알게 되었다.&lt;/li&gt;
&lt;li&gt;사용한 방법은 크게 보면 두 가지이다. ID와 Password에 값이 없을 때는 false라는 상태 값을 부여하고, input event로 인해 true로 변경되었을 때, active라는 css값을 통해 버튼을 활성화 시키는 것이다. 쉽게 간과하고 넘어갈 수 있는 것은 활성화까지만을 목표로 접근한다는 점이다. 항상 활성화와 함께 비활성화는 어떻게 할 것인지, else에 관한 부분을 고려해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-main-page&quot;&gt;&lt;a href=&quot;#2-main-page&quot; aria-label=&quot;2 main page permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;2. Main Page&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;main page를 만들고 난 뒤, 여러모로 느낀 점이 많았다. 첫번째는 전체적인 layout에 대한 설계 없이 머릿속으로만 구상하면서 만들다보니 완성한 뒤에 쓸모 없어 보이는 tag, 비효율적인 id, class, img와 background image 사이에서의 전무한 고민 등 여러가지 문제점을 많이 느꼈다.&lt;/p&gt;
&lt;p&gt;첫번째로 전체적인 구성을 어느정도 완성하지 않으면, tree구조로 이루어져 있는 HTML에서 자칫 불필요한 열대 우림을 만들 수 있다는 점이다. 더불어 tag 이름에 대한 충분한 고민이 없기 때문에 부정확하고, 직관적이지 않은 tag를 남발할 수 있다.&lt;/p&gt;
&lt;p&gt;두번째로 id와 class에 대한 사전 설계가 정말 중요한 것 같다. 오랜 기간 축적된 경험이 있다면 어느 정도 규모의 tree는 감당할 수 있겠지만 경험이 없는 상태에서 무작정 tree를 만들다보면 때론 불필요하고, 때론 직관적이지 않은 id, class를 만들게 되고 결국 후에 logic을 작성할 때 부메랑이 되어 돌아온다는 것을 알게 되었다. 또한 css의 작성 과정에서도 id, class의 점수값에 따른 반영 차이 때문에 중간에 id &amp;#x3C;-&gt; class를 변경해야 될 때도 있었는데, 다행히 복잡하지 않은 단순한 page였기에 가능한 것이지 실제로 프로젝트 중에 이런 일이 발생한다면 더 큰 일이 생기 수도 있겠다는 생각이 들었다.&lt;/p&gt;
&lt;p&gt;세번째로 아직 span이나 div에 background image / 그냥 image tag 사이에 어떠한 선택을 해야하는지에 대한 명확한 기준이 없다. 단순하게 HTML 안에서 img를 남발하다보니 ‘src’ 덕분에 코드 자체가 굉장히 지저분해지고 가독성이 많이 떨어져 보인다. dom으로 제어하는 부분이나, css 값을 적용하는 것에는 둘 사이에 큰 차이가 있다고 생각이 들지는 않았는데, 실제 instagram은 대부분의 image를 span의 background-image로 적용하고 있었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주어진 assignment는 검색 창에 한 글자씩 입력할 때, 연관 검색어 같은 창이 생성되면서 일치하는 글자에 색깔이 변하게 하는 것이었다.&lt;/li&gt;
&lt;li&gt;먼저 input 박스 밑에 숨겨둘 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 태그를 만들었다. 그리고 &lt;code class=&quot;language-text&quot;&gt;{ display: none }&lt;/code&gt;으로 숨겨두었다. 그리고 dom을 사용해서 유사 배열 형태로 값을 받은 뒤, foreach와 같은 method를 사용하기 위해 Array.from으로 배열로 바꾸어주었다.&lt;/li&gt;
&lt;li&gt;Login Page에서 배운 input event를 사용해 한 글자마다의 즉각적인 변화가 가능하도록 했다.
foreach를 통해 각각의 글자에 접근이 가능해졌고, 일치하는 문자열, 불일치하는 문자열로 나누었다.
innerHTML을 통해 ’&lt;span class=&quot;&quot;&gt;‘를 직접입력해 색깔이 변하는 span을 적용해주었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;feedback&quot;&gt;&lt;a href=&quot;#feedback&quot; aria-label=&quot;feedback permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;Feedback&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;기본 바탕 -&gt; 쓸데 없는 것은 무조건 쓰지 말아야 하고, 최대한 간결하고 짧은 코드로 html/css를 완성해야 한다.&lt;/li&gt;
&lt;li&gt;필요 없는 div는 쓰지 말아야 한다.&lt;/li&gt;
&lt;li&gt;caniuse.com -&gt; css나 event등의 browser별 지원 여부를 알려주는 페이지이다.&lt;/li&gt;
&lt;li&gt;flex는 나오지 얼마 되지 않았기 때문에 이것을 사용하지 않고도 할 줄 알아야 한다. flex는 보통 row로 정렬할 경우에 많이 사용한다. 세로 정렬은 block 기반 element일 경우 따로 지정하지 않아도 되기 때문에 필요없는 flex는 지양해야 한다.&lt;/li&gt;
&lt;li&gt;부모 기준으로 absolute를 쓰지 않아도 정렬이 가능한 경우, relative, absolute도 쓰지 않아도 된다.&lt;/li&gt;
&lt;li&gt;​form은 block / input, button은 none block 요소이다.&lt;/li&gt;
&lt;li&gt;다양한 tag를 알맞게 사용하는 것은 매우 중요하고, 효율적이고, 직관적인 html 작성이 가능하다.&lt;br&gt;
그러나 잘못된 tag는 오히려 혼란을 야기할 수 있으므로 미리 알아보고 적절한 곳에 활용하는 것이 중요하다.&lt;/li&gt;
&lt;li&gt;section는 말 그래도 section을 나눌 때 사용한다. 따로 css가 필요할 경우에는 class를 부여해서 적용한다. body 안의 전체를 section으로 감싸는 것은 어색하다.&lt;/li&gt;
&lt;li&gt;image를 감싸고 있는 불필요한 div, span은 제거한다.&lt;/li&gt;
&lt;li&gt;image에 관하여, 우선 img 태그와 background-image의 기능적인 차이는 거의 없다.&lt;/li&gt;
&lt;li&gt;구글에 검색될 수 있는 여지가 있는 것은 img 태그이다.&lt;/li&gt;
&lt;li&gt;css로 다루기 쉬운 것은 div, span의 background-image이다. 장, 단점이 있는 것 같다.&lt;/li&gt;
&lt;li&gt;img 태그는 가로, 세로 둘 중에 하나만 값을 주어도 자동으로 비율에 맞추어 적용한다. 오히려 따로 값을 줄 경우 이미지가 깨질 여지가 있다.&lt;/li&gt;
&lt;li&gt;일정한 길이와 넓이가 있는 box에 overflow: auto를 적용할 경우, 해당 크기보다 커졌을 때 스크롤 바를 만들 수 있다.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>